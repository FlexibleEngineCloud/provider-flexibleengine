/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AnalysisCoreNodesObservation struct {
	RootVolumeSize *float64 `json:"rootVolumeSize,omitempty" tf:"root_volume_size,omitempty"`

	RootVolumeType *string `json:"rootVolumeType,omitempty" tf:"root_volume_type,omitempty"`
}

type AnalysisCoreNodesParameters struct {

	// Number of data disks of the node
	// Value range: 0 to 10
	// +kubebuilder:validation:Required
	DataVolumeCount *float64 `json:"dataVolumeCount" tf:"data_volume_count,omitempty"`

	// Data disk size of the node
	// Value range: 100 GB to 32000 GB
	// +kubebuilder:validation:Required
	DataVolumeSize *float64 `json:"dataVolumeSize" tf:"data_volume_size,omitempty"`

	// Data disk storage type of the node, supporting SATA and SSD currently
	// +kubebuilder:validation:Required
	DataVolumeType *string `json:"dataVolumeType" tf:"data_volume_type,omitempty"`

	// Best match based on several years of commissioning
	// experience. MRS supports specifications of hosts, and host specifications are
	// determined by CPUs, memory, and disks space.
	// +kubebuilder:validation:Required
	Flavor *string `json:"flavor" tf:"flavor,omitempty"`

	// Number of nodes. The value ranges from 0 to 500 and the default value is 0.
	// The total number of Core and Task nodes cannot exceed 500.
	// +kubebuilder:validation:Required
	NodeNumber *float64 `json:"nodeNumber" tf:"node_number,omitempty"`
}

type AnalysisTaskNodesObservation struct {
	RootVolumeSize *float64 `json:"rootVolumeSize,omitempty" tf:"root_volume_size,omitempty"`

	RootVolumeType *string `json:"rootVolumeType,omitempty" tf:"root_volume_type,omitempty"`
}

type AnalysisTaskNodesParameters struct {

	// Number of data disks of the node
	// Value range: 0 to 10
	// +kubebuilder:validation:Required
	DataVolumeCount *float64 `json:"dataVolumeCount" tf:"data_volume_count,omitempty"`

	// Data disk size of the node
	// Value range: 100 GB to 32000 GB
	// +kubebuilder:validation:Required
	DataVolumeSize *float64 `json:"dataVolumeSize" tf:"data_volume_size,omitempty"`

	// Data disk storage type of the node, supporting SATA and SSD currently
	// +kubebuilder:validation:Required
	DataVolumeType *string `json:"dataVolumeType" tf:"data_volume_type,omitempty"`

	// Best match based on several years of commissioning
	// experience. MRS supports specifications of hosts, and host specifications are
	// determined by CPUs, memory, and disks space.
	// +kubebuilder:validation:Required
	Flavor *string `json:"flavor" tf:"flavor,omitempty"`

	// Number of nodes. The value ranges from 0 to 500 and the default value is 0.
	// The total number of Core and Task nodes cannot exceed 500.
	// +kubebuilder:validation:Required
	NodeNumber *float64 `json:"nodeNumber" tf:"node_number,omitempty"`
}

type ComponentsObservation struct {

	// Component description.
	ComponentDesc *string `json:"componentDesc,omitempty" tf:"component_desc,omitempty"`

	// Component ID. For example, component_id of Hadoop is MRS 3.1.0-LTS.1_001, MRS 2.1.0_001,
	// MRS 2.0.1_001, and MRS 1.8.9_001.
	ComponentID *string `json:"componentId,omitempty" tf:"component_id,omitempty"`

	// Component name.
	ComponentName *string `json:"componentName,omitempty" tf:"component_name,omitempty"`

	// Component version.
	ComponentVersion *string `json:"componentVersion,omitempty" tf:"component_version,omitempty"`
}

type ComponentsParameters struct {
}

type HybridClusterObservation struct {

	// Specifies the analysis core nodes information.
	// +kubebuilder:validation:Required
	AnalysisCoreNodes []AnalysisCoreNodesObservation `json:"analysisCoreNodes,omitempty" tf:"analysis_core_nodes,omitempty"`

	// Specifies the analysis task nodes information.
	// +kubebuilder:validation:Optional
	AnalysisTaskNodes []AnalysisTaskNodesObservation `json:"analysisTaskNodes,omitempty" tf:"analysis_task_nodes,omitempty"`

	// The value is Metered, indicating on-demand payment.
	BillingType *string `json:"billingType,omitempty" tf:"billing_type,omitempty"`

	// Time when charging starts.
	ChargingStartTime *string `json:"chargingStartTime,omitempty" tf:"charging_start_time,omitempty"`

	Components []ComponentsObservation `json:"components,omitempty" tf:"components,omitempty"`

	// Cluster creation time.
	CreateAt *string `json:"createAt,omitempty" tf:"create_at,omitempty"`

	// Backup external IP address.
	ExternalAlternateIP *string `json:"externalAlternateIp,omitempty" tf:"external_alternate_ip,omitempty"`

	// External IP address.
	ExternalIP *string `json:"externalIp,omitempty" tf:"external_ip,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Iternal IP address.
	InternalIP *string `json:"internalIp,omitempty" tf:"internal_ip,omitempty"`

	// IP address of a Master node.
	MasterNodeIP *string `json:"masterNodeIp,omitempty" tf:"master_node_ip,omitempty"`

	// Specifies the master nodes information.
	// +kubebuilder:validation:Required
	MasterNodes []MasterNodesObservation `json:"masterNodes,omitempty" tf:"master_nodes,omitempty"`

	// Primary private IP address.
	PrivateIPFirst *string `json:"privateIpFirst,omitempty" tf:"private_ip_first,omitempty"`

	// Cluster creation fee, which is automatically calculated.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Specifies the streaming core nodes information.
	// +kubebuilder:validation:Required
	StreamingCoreNodes []StreamingCoreNodesObservation `json:"streamingCoreNodes,omitempty" tf:"streaming_core_nodes,omitempty"`

	// Specifies the streaming task nodes information.
	// +kubebuilder:validation:Optional
	StreamingTaskNodes []StreamingTaskNodesObservation `json:"streamingTaskNodes,omitempty" tf:"streaming_task_nodes,omitempty"`

	// Total node number.
	TotalNodeNumber *float64 `json:"totalNodeNumber,omitempty" tf:"total_node_number,omitempty"`

	// Cluster update time.
	UpdateAt *string `json:"updateAt,omitempty" tf:"update_at,omitempty"`

	// URI address for remote login of the elastic cloud server.
	Vnc *string `json:"vnc,omitempty" tf:"vnc,omitempty"`
}

type HybridClusterParameters struct {

	// Specifies the analysis core nodes information.
	// +kubebuilder:validation:Required
	AnalysisCoreNodes []AnalysisCoreNodesParameters `json:"analysisCoreNodes" tf:"analysis_core_nodes,omitempty"`

	// Specifies the analysis task nodes information.
	// +kubebuilder:validation:Optional
	AnalysisTaskNodes []AnalysisTaskNodesParameters `json:"analysisTaskNodes,omitempty" tf:"analysis_task_nodes,omitempty"`

	// ID or Name of an available zone. Obtain the value
	// from Regions and Endpoints.
	// +kubebuilder:validation:Required
	AvailableZone *string `json:"availableZone" tf:"available_zone,omitempty"`

	// Indicates the password of the MRS Manager administrator.
	// +kubebuilder:validation:Optional
	ClusterAdminSecretSecretRef *v1.SecretKeySelector `json:"clusterAdminSecretSecretRef,omitempty" tf:"-"`

	// Cluster name, which is globally unique and contains
	// only 1 to 64 letters, digits, hyphens (-), and underscores (_).
	// +kubebuilder:validation:Required
	ClusterName *string `json:"clusterName" tf:"cluster_name,omitempty"`

	// Version of the clusters. Possible values are as follows:
	// MRS 1.8.9, MRS 2.0.1, MRS 2.1.0 and MRS 3.1.0-LTS.1.
	// +kubebuilder:validation:Optional
	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version,omitempty"`

	// Component name
	// +kubebuilder:validation:Required
	ComponentList []*string `json:"componentList" tf:"component_list,omitempty"`

	// Indicates whether logs are collected when cluster
	// installation fails. 0: not collected 1: collected The default value is 0. If
	// log_collection is set to 1, OBS buckets will be created to collect the MRS logs.
	// These buckets will be charged.
	// +kubebuilder:validation:Optional
	LogCollection *float64 `json:"logCollection,omitempty" tf:"log_collection,omitempty"`

	// Name of a key pair You can use a key
	// to log in to the Master node in the cluster.
	// +kubebuilder:validation:Required
	MasterNodeKeyPairSecretRef v1.SecretKeySelector `json:"masterNodeKeyPairSecretRef" tf:"-"`

	// Specifies the master nodes information.
	// +kubebuilder:validation:Required
	MasterNodes []MasterNodesParameters `json:"masterNodes" tf:"master_nodes,omitempty"`

	// Cluster region information. Obtain the value from
	// Regions and Endpoints.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// MRS cluster running mode
	// +kubebuilder:validation:Optional
	SafeMode *float64 `json:"safeMode,omitempty" tf:"safe_mode,omitempty"`

	// Specifies the id of the security group which the cluster
	// belongs to. If this parameter is empty, MRS automatically creates a security group, whose
	// name starts with mrs_{cluster_name}.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Reference to a SecurityGroup in vpc to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDRef *v1.Reference `json:"securityGroupIdRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup in vpc to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDSelector *v1.Selector `json:"securityGroupIdSelector,omitempty" tf:"-"`

	// Specifies the streaming core nodes information.
	// +kubebuilder:validation:Required
	StreamingCoreNodes []StreamingCoreNodesParameters `json:"streamingCoreNodes" tf:"streaming_core_nodes,omitempty"`

	// Specifies the streaming task nodes information.
	// +kubebuilder:validation:Optional
	StreamingTaskNodes []StreamingTaskNodesParameters `json:"streamingTaskNodes,omitempty" tf:"streaming_task_nodes,omitempty"`

	// Specifies the id of the subnet.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1.VPCSubnet
	// +crossplane:generate:reference:extractor=github.com/FrangipaneTeam/provider-flexibleengine/config/common.IDExtractor()
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a VPCSubnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a VPCSubnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// Specifies the id of the VPC.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

type MasterNodesObservation struct {
	RootVolumeSize *float64 `json:"rootVolumeSize,omitempty" tf:"root_volume_size,omitempty"`

	RootVolumeType *string `json:"rootVolumeType,omitempty" tf:"root_volume_type,omitempty"`
}

type MasterNodesParameters struct {

	// Number of data disks of the node
	// Value range: 0 to 10
	// +kubebuilder:validation:Required
	DataVolumeCount *float64 `json:"dataVolumeCount" tf:"data_volume_count,omitempty"`

	// Data disk size of the node
	// Value range: 100 GB to 32000 GB
	// +kubebuilder:validation:Required
	DataVolumeSize *float64 `json:"dataVolumeSize" tf:"data_volume_size,omitempty"`

	// Data disk storage type of the node, supporting SATA and SSD currently
	// +kubebuilder:validation:Required
	DataVolumeType *string `json:"dataVolumeType" tf:"data_volume_type,omitempty"`

	// Best match based on several years of commissioning
	// experience. MRS supports specifications of hosts, and host specifications are
	// determined by CPUs, memory, and disks space.
	// +kubebuilder:validation:Required
	Flavor *string `json:"flavor" tf:"flavor,omitempty"`

	// Number of nodes. The value ranges from 0 to 500 and the default value is 0.
	// The total number of Core and Task nodes cannot exceed 500.
	// +kubebuilder:validation:Required
	NodeNumber *float64 `json:"nodeNumber" tf:"node_number,omitempty"`
}

type StreamingCoreNodesObservation struct {
	RootVolumeSize *float64 `json:"rootVolumeSize,omitempty" tf:"root_volume_size,omitempty"`

	RootVolumeType *string `json:"rootVolumeType,omitempty" tf:"root_volume_type,omitempty"`
}

type StreamingCoreNodesParameters struct {

	// Number of data disks of the node
	// Value range: 0 to 10
	// +kubebuilder:validation:Required
	DataVolumeCount *float64 `json:"dataVolumeCount" tf:"data_volume_count,omitempty"`

	// Data disk size of the node
	// Value range: 100 GB to 32000 GB
	// +kubebuilder:validation:Required
	DataVolumeSize *float64 `json:"dataVolumeSize" tf:"data_volume_size,omitempty"`

	// Data disk storage type of the node, supporting SATA and SSD currently
	// +kubebuilder:validation:Required
	DataVolumeType *string `json:"dataVolumeType" tf:"data_volume_type,omitempty"`

	// Best match based on several years of commissioning
	// experience. MRS supports specifications of hosts, and host specifications are
	// determined by CPUs, memory, and disks space.
	// +kubebuilder:validation:Required
	Flavor *string `json:"flavor" tf:"flavor,omitempty"`

	// Number of nodes. The value ranges from 0 to 500 and the default value is 0.
	// The total number of Core and Task nodes cannot exceed 500.
	// +kubebuilder:validation:Required
	NodeNumber *float64 `json:"nodeNumber" tf:"node_number,omitempty"`
}

type StreamingTaskNodesObservation struct {
	RootVolumeSize *float64 `json:"rootVolumeSize,omitempty" tf:"root_volume_size,omitempty"`

	RootVolumeType *string `json:"rootVolumeType,omitempty" tf:"root_volume_type,omitempty"`
}

type StreamingTaskNodesParameters struct {

	// Number of data disks of the node
	// Value range: 0 to 10
	// +kubebuilder:validation:Required
	DataVolumeCount *float64 `json:"dataVolumeCount" tf:"data_volume_count,omitempty"`

	// Data disk size of the node
	// Value range: 100 GB to 32000 GB
	// +kubebuilder:validation:Required
	DataVolumeSize *float64 `json:"dataVolumeSize" tf:"data_volume_size,omitempty"`

	// Data disk storage type of the node, supporting SATA and SSD currently
	// +kubebuilder:validation:Required
	DataVolumeType *string `json:"dataVolumeType" tf:"data_volume_type,omitempty"`

	// Best match based on several years of commissioning
	// experience. MRS supports specifications of hosts, and host specifications are
	// determined by CPUs, memory, and disks space.
	// +kubebuilder:validation:Required
	Flavor *string `json:"flavor" tf:"flavor,omitempty"`

	// Number of nodes. The value ranges from 0 to 500 and the default value is 0.
	// The total number of Core and Task nodes cannot exceed 500.
	// +kubebuilder:validation:Required
	NodeNumber *float64 `json:"nodeNumber" tf:"node_number,omitempty"`
}

// HybridClusterSpec defines the desired state of HybridCluster
type HybridClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HybridClusterParameters `json:"forProvider"`
}

// HybridClusterStatus defines the observed state of HybridCluster.
type HybridClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HybridClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HybridCluster is the Schema for the HybridClusters API. ""page_title: "flexibleengine_mrs_hybrid_cluster_v1"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type HybridCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HybridClusterSpec   `json:"spec"`
	Status            HybridClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HybridClusterList contains a list of HybridClusters
type HybridClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HybridCluster `json:"items"`
}

// Repository type metadata.
var (
	HybridCluster_Kind             = "HybridCluster"
	HybridCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HybridCluster_Kind}.String()
	HybridCluster_KindAPIVersion   = HybridCluster_Kind + "." + CRDGroupVersion.String()
	HybridCluster_GroupVersionKind = CRDGroupVersion.WithKind(HybridCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&HybridCluster{}, &HybridClusterList{})
}
