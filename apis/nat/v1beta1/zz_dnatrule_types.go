/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DnatRuleObservation struct {

	// DNAT rule creation time.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The actual floating IP address.
	FloatingIPAddress *string `json:"floatingIpAddress,omitempty" tf:"floating_ip_address,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// DNAT rule status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type DnatRuleParameters struct {

	// Specifies the description of the dnat rule.
	// The value is a string of no more than 255 characters, and angle brackets (<>) are not allowed.
	// Changing this creates a new dnat rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the port for providing services
	// that are accessible from external systems. Changing this creates a new dnat rule.
	// +kubebuilder:validation:Required
	ExternalServicePort *float64 `json:"externalServicePort" tf:"external_service_port,omitempty"`

	// Specifies the ID of the floating IP address.
	// Changing this creates a new dnat rule.
	// +crossplane:generate:reference:type=github.com/FlexibleEngineCloud/provider-flexibleengine/apis/eip/v1beta1.EIP
	// +kubebuilder:validation:Optional
	FloatingIPID *string `json:"floatingIpId,omitempty" tf:"floating_ip_id,omitempty"`

	// Reference to a EIP in eip to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDRef *v1.Reference `json:"floatingIpIdRef,omitempty" tf:"-"`

	// Selector for a EIP in eip to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDSelector *v1.Selector `json:"floatingIpIdSelector,omitempty" tf:"-"`

	// Specifies the port used by ECSs or BMSs to provide services
	// that are accessible from external systems. Changing this creates a new dnat rule.
	// +kubebuilder:validation:Required
	InternalServicePort *float64 `json:"internalServicePort" tf:"internal_service_port,omitempty"`

	// Specifies the ID of the nat gateway this dnat rule belongs to.
	// Changing this creates a new dnat rule.
	// +crossplane:generate:reference:type=Gateway
	// +kubebuilder:validation:Optional
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// Reference to a Gateway to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDRef *v1.Reference `json:"natGatewayIdRef,omitempty" tf:"-"`

	// Selector for a Gateway to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDSelector *v1.Selector `json:"natGatewayIdSelector,omitempty" tf:"-"`

	// Specifies the port ID of an ECS or a BMS. This parameter is
	// mandatory in VPC scenario. Changing this creates a new dnat rule.
	// +crossplane:generate:reference:type=github.com/FlexibleEngineCloud/provider-flexibleengine/apis/vpc/v1beta1.Port
	// +kubebuilder:validation:Optional
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// Reference to a Port in vpc to populate portId.
	// +kubebuilder:validation:Optional
	PortIDRef *v1.Reference `json:"portIdRef,omitempty" tf:"-"`

	// Selector for a Port in vpc to populate portId.
	// +kubebuilder:validation:Optional
	PortIDSelector *v1.Selector `json:"portIdSelector,omitempty" tf:"-"`

	// Specifies the private IP address of a user, for example,
	// the IP address of a VPC for dedicated connection. This parameter is mandatory in
	// Direct Connect scenario. Changing this creates a new dnat rule.
	// +kubebuilder:validation:Optional
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Specifies the protocol type. Currently,
	// TCP, UDP, and ANY are supported. Changing this creates a new dnat rule.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`
}

// DnatRuleSpec defines the desired state of DnatRule
type DnatRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DnatRuleParameters `json:"forProvider"`
}

// DnatRuleStatus defines the observed state of DnatRule.
type DnatRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DnatRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DnatRule is the Schema for the DnatRules API. ""page_title: "flexibleengine_nat_dnat_rule_v2"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type DnatRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DnatRuleSpec   `json:"spec"`
	Status            DnatRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DnatRuleList contains a list of DnatRules
type DnatRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DnatRule `json:"items"`
}

// Repository type metadata.
var (
	DnatRule_Kind             = "DnatRule"
	DnatRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DnatRule_Kind}.String()
	DnatRule_KindAPIVersion   = DnatRule_Kind + "." + CRDGroupVersion.String()
	DnatRule_GroupVersionKind = CRDGroupVersion.WithKind(DnatRule_Kind)
)

func init() {
	SchemeBuilder.Register(&DnatRule{}, &DnatRuleList{})
}
