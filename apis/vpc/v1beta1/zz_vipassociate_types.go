/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VIPAssociateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IP address in the subnet for this vip.
	VipIPAddress *string `json:"vipIpAddress,omitempty" tf:"vip_ip_address,omitempty"`

	// The ID of the subnet this vip connects to.
	VipSubnetID *string `json:"vipSubnetId,omitempty" tf:"vip_subnet_id,omitempty"`
}

type VIPAssociateParameters struct {

	// An array of one or more IDs of the ports to attach the vip to.
	// Changing this creates a new vip associate.
	// +crossplane:generate:reference:type=Port
	// +kubebuilder:validation:Optional
	PortIds []*string `json:"portIds,omitempty" tf:"port_ids,omitempty"`

	// References to Port to populate portIds.
	// +kubebuilder:validation:Optional
	PortIdsRefs []v1.Reference `json:"portIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Port to populate portIds.
	// +kubebuilder:validation:Optional
	PortIdsSelector *v1.Selector `json:"portIdsSelector,omitempty" tf:"-"`

	// The ID of vip to attach the port to.
	// Changing this creates a new vip associate.
	// +crossplane:generate:reference:type=VIP
	// +kubebuilder:validation:Optional
	VipID *string `json:"vipId,omitempty" tf:"vip_id,omitempty"`

	// Reference to a VIP to populate vipId.
	// +kubebuilder:validation:Optional
	VipIDRef *v1.Reference `json:"vipIdRef,omitempty" tf:"-"`

	// Selector for a VIP to populate vipId.
	// +kubebuilder:validation:Optional
	VipIDSelector *v1.Selector `json:"vipIdSelector,omitempty" tf:"-"`
}

// VIPAssociateSpec defines the desired state of VIPAssociate
type VIPAssociateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VIPAssociateParameters `json:"forProvider"`
}

// VIPAssociateStatus defines the observed state of VIPAssociate.
type VIPAssociateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VIPAssociateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VIPAssociate is the Schema for the VIPAssociates API. ""page_title: "flexibleengine_networking_vip_associate_v2"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type VIPAssociate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VIPAssociateSpec   `json:"spec"`
	Status            VIPAssociateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VIPAssociateList contains a list of VIPAssociates
type VIPAssociateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VIPAssociate `json:"items"`
}

// Repository type metadata.
var (
	VIPAssociate_Kind             = "VIPAssociate"
	VIPAssociate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VIPAssociate_Kind}.String()
	VIPAssociate_KindAPIVersion   = VIPAssociate_Kind + "." + CRDGroupVersion.String()
	VIPAssociate_GroupVersionKind = CRDGroupVersion.WithKind(VIPAssociate_Kind)
)

func init() {
	SchemeBuilder.Register(&VIPAssociate{}, &VIPAssociateList{})
}
