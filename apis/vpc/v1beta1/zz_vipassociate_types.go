/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VipAssociateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IP address in the subnet for this vip.
	VipIPAddress *string `json:"vipIpAddress,omitempty" tf:"vip_ip_address,omitempty"`

	// The ID of the subnet this vip connects to.
	VipSubnetID *string `json:"vipSubnetId,omitempty" tf:"vip_subnet_id,omitempty"`
}

type VipAssociateParameters struct {

	// An array of one or more IDs of the ports to attach the vip to.
	// Changing this creates a new vip associate.
	// +kubebuilder:validation:Required
	PortIds []*string `json:"portIds" tf:"port_ids,omitempty"`

	// The ID of vip to attach the port to.
	// Changing this creates a new vip associate.
	// +kubebuilder:validation:Required
	VipID *string `json:"vipId" tf:"vip_id,omitempty"`
}

// VipAssociateSpec defines the desired state of VipAssociate
type VipAssociateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VipAssociateParameters `json:"forProvider"`
}

// VipAssociateStatus defines the observed state of VipAssociate.
type VipAssociateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VipAssociateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VipAssociate is the Schema for the VipAssociates API. ""page_title: "flexibleengine_networking_vip_associate_v2"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type VipAssociate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VipAssociateSpec   `json:"spec"`
	Status            VipAssociateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VipAssociateList contains a list of VipAssociates
type VipAssociateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VipAssociate `json:"items"`
}

// Repository type metadata.
var (
	VipAssociate_Kind             = "VipAssociate"
	VipAssociate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VipAssociate_Kind}.String()
	VipAssociate_KindAPIVersion   = VipAssociate_Kind + "." + CRDGroupVersion.String()
	VipAssociate_GroupVersionKind = CRDGroupVersion.WithKind(VipAssociate_Kind)
)

func init() {
	SchemeBuilder.Register(&VipAssociate{}, &VipAssociateList{})
}
