/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PeeringConnectionAccepterObservation struct {

	// The VPC peering connection ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The VPC peering connection name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The Tenant Id of the accepter tenant.
	PeerTenantID *string `json:"peerTenantId,omitempty" tf:"peer_tenant_id,omitempty"`

	// The VPC ID of the accepter tenant.
	PeerVPCID *string `json:"peerVpcId,omitempty" tf:"peer_vpc_id,omitempty"`

	// The VPC peering connection status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The ID of requester VPC involved in a VPC peering connection.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type PeeringConnectionAccepterParameters struct {

	// Whether or not to accept the peering request. Defaults to false.
	// +kubebuilder:validation:Optional
	Accept *bool `json:"accept,omitempty" tf:"accept,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The VPC Peering Connection ID to manage. Changing this creates a new VPC peering connection accepter.
	// +crossplane:generate:reference:type=PeeringConnection
	// +kubebuilder:validation:Optional
	VPCPeeringConnectionID *string `json:"vpcPeeringConnectionId,omitempty" tf:"vpc_peering_connection_id,omitempty"`

	// Reference to a PeeringConnection to populate vpcPeeringConnectionId.
	// +kubebuilder:validation:Optional
	VPCPeeringConnectionIDRef *v1.Reference `json:"vpcPeeringConnectionIdRef,omitempty" tf:"-"`

	// Selector for a PeeringConnection to populate vpcPeeringConnectionId.
	// +kubebuilder:validation:Optional
	VPCPeeringConnectionIDSelector *v1.Selector `json:"vpcPeeringConnectionIdSelector,omitempty" tf:"-"`
}

// PeeringConnectionAccepterSpec defines the desired state of PeeringConnectionAccepter
type PeeringConnectionAccepterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PeeringConnectionAccepterParameters `json:"forProvider"`
}

// PeeringConnectionAccepterStatus defines the observed state of PeeringConnectionAccepter.
type PeeringConnectionAccepterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PeeringConnectionAccepterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PeeringConnectionAccepter is the Schema for the PeeringConnectionAccepters API. ""page_title: "flexibleengine_vpc_peering_connection_accepter_v2"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type PeeringConnectionAccepter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PeeringConnectionAccepterSpec   `json:"spec"`
	Status            PeeringConnectionAccepterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PeeringConnectionAccepterList contains a list of PeeringConnectionAccepters
type PeeringConnectionAccepterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PeeringConnectionAccepter `json:"items"`
}

// Repository type metadata.
var (
	PeeringConnectionAccepter_Kind             = "PeeringConnectionAccepter"
	PeeringConnectionAccepter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PeeringConnectionAccepter_Kind}.String()
	PeeringConnectionAccepter_KindAPIVersion   = PeeringConnectionAccepter_Kind + "." + CRDGroupVersion.String()
	PeeringConnectionAccepter_GroupVersionKind = CRDGroupVersion.WithKind(PeeringConnectionAccepter_Kind)
)

func init() {
	SchemeBuilder.Register(&PeeringConnectionAccepter{}, &PeeringConnectionAccepterList{})
}
