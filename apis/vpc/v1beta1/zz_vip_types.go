/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VIPObservation struct {

	// The device owner of the VIP.
	DeviceOwner *string `json:"deviceOwner,omitempty" tf:"device_owner,omitempty"`

	// The VIP ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The MAC address of the VIP.
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// The VIP status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The VIP ID.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type VIPParameters struct {

	// Specifies the IP address desired in the subnet for this VIP.
	// Changing this will create a new VIP resource.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Specifies the IP version, either 4 (default) or 6.
	// Changing this will create a new VIP resource.
	// +kubebuilder:validation:Optional
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Specifies a unique name for the VIP.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the ID of the VPC Subnet to which the VIP belongs.
	// Changing this will create a new VIP resource.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1.VPCSubnet
	// +crossplane:generate:reference:extractor=github.com/FrangipaneTeam/provider-flexibleengine/pkg/tools.ExtractorParamPathfunc(true, "id")
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a VPCSubnet in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a VPCSubnet in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the VIP.
	// If omitted, the provider-level region will be used. Changing this will create a new VIP resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// VIPSpec defines the desired state of VIP
type VIPSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VIPParameters `json:"forProvider"`
}

// VIPStatus defines the observed state of VIP.
type VIPStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VIPObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VIP is the Schema for the VIPs API. ""page_title: "flexibleengine_networking_vip_v2"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type VIP struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VIPSpec   `json:"spec"`
	Status            VIPStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VIPList contains a list of VIPs
type VIPList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VIP `json:"items"`
}

// Repository type metadata.
var (
	VIP_Kind             = "VIP"
	VIP_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VIP_Kind}.String()
	VIP_KindAPIVersion   = VIP_Kind + "." + CRDGroupVersion.String()
	VIP_GroupVersionKind = CRDGroupVersion.WithKind(VIP_Kind)
)

func init() {
	SchemeBuilder.Register(&VIP{}, &VIPList{})
}
