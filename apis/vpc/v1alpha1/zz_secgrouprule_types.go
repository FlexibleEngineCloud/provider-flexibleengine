/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecgroupRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SecgroupRuleParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Direction *string `json:"direction" tf:"direction,omitempty"`

	// +kubebuilder:validation:Required
	Ethertype *string `json:"ethertype" tf:"ethertype,omitempty"`

	// +kubebuilder:validation:Optional
	PortRangeMax *float64 `json:"portRangeMax,omitempty" tf:"port_range_max,omitempty"`

	// +kubebuilder:validation:Optional
	PortRangeMin *float64 `json:"portRangeMin,omitempty" tf:"port_range_min,omitempty"`

	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +crossplane:generate:reference:type=SecurityGroup
	// +kubebuilder:validation:Optional
	RemoteGroupID *string `json:"remoteGroupId,omitempty" tf:"remote_group_id,omitempty"`

	// Reference to a SecurityGroup to populate remoteGroupId.
	// +kubebuilder:validation:Optional
	RemoteGroupIDRef *v1.Reference `json:"remoteGroupIdRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup to populate remoteGroupId.
	// +kubebuilder:validation:Optional
	RemoteGroupIDSelector *v1.Selector `json:"remoteGroupIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RemoteIPPrefix *string `json:"remoteIpPrefix,omitempty" tf:"remote_ip_prefix,omitempty"`

	// +crossplane:generate:reference:type=github.com/gaetanars/provider-flexibleengine/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Reference to a SecurityGroup in vpc to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDRef *v1.Reference `json:"securityGroupIdRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup in vpc to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDSelector *v1.Selector `json:"securityGroupIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// SecgroupRuleSpec defines the desired state of SecgroupRule
type SecgroupRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecgroupRuleParameters `json:"forProvider"`
}

// SecgroupRuleStatus defines the observed state of SecgroupRule.
type SecgroupRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecgroupRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecgroupRule is the Schema for the SecgroupRules API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type SecgroupRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecgroupRuleSpec   `json:"spec"`
	Status            SecgroupRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecgroupRuleList contains a list of SecgroupRules
type SecgroupRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecgroupRule `json:"items"`
}

// Repository type metadata.
var (
	SecgroupRule_Kind             = "SecgroupRule"
	SecgroupRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecgroupRule_Kind}.String()
	SecgroupRule_KindAPIVersion   = SecgroupRule_Kind + "." + CRDGroupVersion.String()
	SecgroupRule_GroupVersionKind = CRDGroupVersion.WithKind(SecgroupRule_Kind)
)

func init() {
	SchemeBuilder.Register(&SecgroupRule{}, &SecgroupRuleList{})
}
