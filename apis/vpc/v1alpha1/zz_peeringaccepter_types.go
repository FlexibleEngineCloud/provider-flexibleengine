/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PeeringAccepterObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PeerTenantID *string `json:"peerTenantId,omitempty" tf:"peer_tenant_id,omitempty"`

	PeerVPCID *string `json:"peerVpcId,omitempty" tf:"peer_vpc_id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type PeeringAccepterParameters struct {

	// +kubebuilder:validation:Optional
	Accept *bool `json:"accept,omitempty" tf:"accept,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	VPCPeeringConnectionID *string `json:"vpcPeeringConnectionId" tf:"vpc_peering_connection_id,omitempty"`
}

// PeeringAccepterSpec defines the desired state of PeeringAccepter
type PeeringAccepterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PeeringAccepterParameters `json:"forProvider"`
}

// PeeringAccepterStatus defines the observed state of PeeringAccepter.
type PeeringAccepterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PeeringAccepterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PeeringAccepter is the Schema for the PeeringAccepters API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type PeeringAccepter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PeeringAccepterSpec   `json:"spec"`
	Status            PeeringAccepterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PeeringAccepterList contains a list of PeeringAccepters
type PeeringAccepterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PeeringAccepter `json:"items"`
}

// Repository type metadata.
var (
	PeeringAccepter_Kind             = "PeeringAccepter"
	PeeringAccepter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PeeringAccepter_Kind}.String()
	PeeringAccepter_KindAPIVersion   = PeeringAccepter_Kind + "." + CRDGroupVersion.String()
	PeeringAccepter_GroupVersionKind = CRDGroupVersion.WithKind(PeeringAccepter_Kind)
)

func init() {
	SchemeBuilder.Register(&PeeringAccepter{}, &PeeringAccepterList{})
}
