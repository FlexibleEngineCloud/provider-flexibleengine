/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPCSubnetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPv4SubnetID *string `json:"ipv4SubnetId,omitempty" tf:"ipv4_subnet_id,omitempty"`

	IPv6Cidr *string `json:"ipv6Cidr,omitempty" tf:"ipv6_cidr,omitempty"`

	IPv6Gateway *string `json:"ipv6Gateway,omitempty" tf:"ipv6_gateway,omitempty"`

	IPv6SubnetID *string `json:"ipv6SubnetId,omitempty" tf:"ipv6_subnet_id,omitempty"`

	// schema: Deprecated
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type VPCSubnetParameters struct {

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Required
	Cidr *string `json:"cidr" tf:"cidr,omitempty"`

	// +kubebuilder:validation:Optional
	DHCPEnable *bool `json:"dhcpEnable,omitempty" tf:"dhcp_enable,omitempty"`

	// +kubebuilder:validation:Optional
	DNSList []*string `json:"dnsList,omitempty" tf:"dns_list,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	GatewayIP *string `json:"gatewayIp" tf:"gateway_ip,omitempty"`

	// +kubebuilder:validation:Optional
	IPv6Enable *bool `json:"ipv6Enable,omitempty" tf:"ipv6_enable,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PrimaryDNS *string `json:"primaryDns,omitempty" tf:"primary_dns,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	SecondaryDNS *string `json:"secondaryDns,omitempty" tf:"secondary_dns,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +crossplane:generate:reference:type=github.com/gaetanars/provider-flexibleengine/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// VPCSubnetSpec defines the desired state of VPCSubnet
type VPCSubnetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCSubnetParameters `json:"forProvider"`
}

// VPCSubnetStatus defines the observed state of VPCSubnet.
type VPCSubnetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCSubnetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPCSubnet is the Schema for the VPCSubnets API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type VPCSubnet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPCSubnetSpec   `json:"spec"`
	Status            VPCSubnetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCSubnetList contains a list of VPCSubnets
type VPCSubnetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCSubnet `json:"items"`
}

// Repository type metadata.
var (
	VPCSubnet_Kind             = "VPCSubnet"
	VPCSubnet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCSubnet_Kind}.String()
	VPCSubnet_KindAPIVersion   = VPCSubnet_Kind + "." + CRDGroupVersion.String()
	VPCSubnet_GroupVersionKind = CRDGroupVersion.WithKind(VPCSubnet_Kind)
)

func init() {
	SchemeBuilder.Register(&VPCSubnet{}, &VPCSubnetList{})
}
