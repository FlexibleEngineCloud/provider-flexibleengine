/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoutesObservation struct {
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	Nexthop *string `json:"nexthop,omitempty" tf:"nexthop,omitempty"`
}

type RoutesParameters struct {
}

type VpcObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Routes []RoutesObservation `json:"routes,omitempty" tf:"routes,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VpcParameters struct {

	// +kubebuilder:validation:Required
	Cidr *string `json:"cidr" tf:"cidr,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	SecondaryCidr *string `json:"secondaryCidr,omitempty" tf:"secondary_cidr,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// VpcSpec defines the desired state of Vpc
type VpcSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VpcParameters `json:"forProvider"`
}

// VpcStatus defines the observed state of Vpc.
type VpcStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VpcObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Vpc is the Schema for the Vpcs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Vpc struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpcSpec   `json:"spec"`
	Status            VpcStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpcList contains a list of Vpcs
type VpcList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Vpc `json:"items"`
}

// Repository type metadata.
var (
	Vpc_Kind             = "Vpc"
	Vpc_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Vpc_Kind}.String()
	Vpc_KindAPIVersion   = Vpc_Kind + "." + CRDGroupVersion.String()
	Vpc_GroupVersionKind = CRDGroupVersion.WithKind(Vpc_Kind)
)

func init() {
	SchemeBuilder.Register(&Vpc{}, &VpcList{})
}
