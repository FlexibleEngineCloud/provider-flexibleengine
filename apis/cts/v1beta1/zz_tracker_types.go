/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TrackerObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The tracker name. Currently, only tracker system is available.
	TrackerName *string `json:"trackerName,omitempty" tf:"tracker_name,omitempty"`
}

type TrackerParameters struct {

	// The OBS bucket name for a tracker.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/oss/v1beta1.OBSBucket
	// +crossplane:generate:reference:extractor=github.com/FrangipaneTeam/provider-flexibleengine/config/common.BucketNameExtractor()
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Reference to a OBSBucket in oss to populate bucketName.
	// +kubebuilder:validation:Optional
	BucketNameRef *v1.Reference `json:"bucketNameRef,omitempty" tf:"-"`

	// Selector for a OBSBucket in oss to populate bucketName.
	// +kubebuilder:validation:Optional
	BucketNameSelector *v1.Selector `json:"bucketNameSelector,omitempty" tf:"-"`

	// The prefix of a log that needs to be stored in an OBS bucket.
	// +kubebuilder:validation:Optional
	FilePrefixName *string `json:"filePrefixName,omitempty" tf:"file_prefix_name,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The status of a tracker. The value should be enabled when creating a tracker,
	// and can be enabled or disabled when updating it.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

// TrackerSpec defines the desired state of Tracker
type TrackerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrackerParameters `json:"forProvider"`
}

// TrackerStatus defines the observed state of Tracker.
type TrackerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrackerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Tracker is the Schema for the Trackers API. ""page_title: "flexibleengine_cts_tracker_v1"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Tracker struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TrackerSpec   `json:"spec"`
	Status            TrackerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrackerList contains a list of Trackers
type TrackerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Tracker `json:"items"`
}

// Repository type metadata.
var (
	Tracker_Kind             = "Tracker"
	Tracker_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Tracker_Kind}.String()
	Tracker_KindAPIVersion   = Tracker_Kind + "." + CRDGroupVersion.String()
	Tracker_GroupVersionKind = CRDGroupVersion.WithKind(Tracker_Kind)
)

func init() {
	SchemeBuilder.Register(&Tracker{}, &TrackerList{})
}
