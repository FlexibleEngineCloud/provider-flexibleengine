/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PvcObservation struct {

	// The server time when PVC was created.
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp,omitempty"`

	// The PVC ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The current phase of the PVC.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type PvcParameters struct {

	// Specifies the desired access modes the volume should have.
	// The valid values are as follows:
	// +kubebuilder:validation:Required
	AccessModes []*string `json:"accessModes" tf:"access_modes,omitempty"`

	// Specifies the unstructured key value map for external parameters.
	// Changing this will create a new PVC resource.
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Specifies the cluster ID to which the CCE PVC belongs.
	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Specifies the map of string keys and values for labels.
	// Changing this will create a new PVC resource.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the unique name of the PVC resource. This parameter can contain a
	// maximum of 63 characters, which may consist of lowercase letters, digits and hyphens (-), and must start and end with
	// lowercase letters and digits. Changing this will create a new PVC resource.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the namespace to logically divide your containers into different
	// group. Changing this will create a new PVC resource.
	// +crossplane:generate:reference:type=MyCACA
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Reference to a MyCACA to populate namespace.
	// +kubebuilder:validation:Optional
	NamespaceRef *v1.Reference `json:"namespaceRef,omitempty" tf:"-"`

	// Selector for a MyCACA to populate namespace.
	// +kubebuilder:validation:Optional
	NamespaceSelector *v1.Selector `json:"namespaceSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the PVC resource.
	// If omitted, the provider-level region will be used. Changing this will create a new PVC resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the minimum amount of storage resources required.
	// Changing this creates a new PVC resource.
	// +kubebuilder:validation:Required
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// Specifies the type of the storage bound to the CCE PVC.
	// The valid values are as follows:
	// +kubebuilder:validation:Required
	StorageClassName *string `json:"storageClassName" tf:"storage_class_name,omitempty"`
}

// PvcSpec defines the desired state of Pvc
type PvcSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PvcParameters `json:"forProvider"`
}

// PvcStatus defines the observed state of Pvc.
type PvcStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PvcObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Pvc is the Schema for the Pvcs API. ""page_title: "flexibleengine_cce_pvc"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Pvc struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PvcSpec   `json:"spec"`
	Status            PvcStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PvcList contains a list of Pvcs
type PvcList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Pvc `json:"items"`
}

// Repository type metadata.
var (
	Pvc_Kind             = "Pvc"
	Pvc_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Pvc_Kind}.String()
	Pvc_KindAPIVersion   = Pvc_Kind + "." + CRDGroupVersion.String()
	Pvc_GroupVersionKind = CRDGroupVersion.WithKind(Pvc_Kind)
)

func init() {
	SchemeBuilder.Register(&Pvc{}, &PvcList{})
}
