/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type APIObservation struct {

	// The name of the API group to which the API belongs.
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// The ID of the API.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type APIParameters struct {

	// Specifies the security authentication mode. The value can be 'APP', 'IAM', and '
	// NONE'.
	// +kubebuilder:validation:Required
	AuthType *string `json:"authType" tf:"auth_type,omitempty"`

	// the backend parameter list (documented below).
	// +kubebuilder:validation:Optional
	BackendParameter []BackendParameterParameters `json:"backendParameter,omitempty" tf:"backend_parameter,omitempty"`

	// Specifies the service backend type. The value can be:
	// +kubebuilder:validation:Required
	BackendType *string `json:"backendType" tf:"backend_type,omitempty"`

	// Specifies whether CORS is supported or not.
	// +kubebuilder:validation:Optional
	Cors *bool `json:"cors,omitempty" tf:"cors,omitempty"`

	// Specifies the description of the API. The description cannot exceed 255 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the example response for a failed request The length cannot
	// exceed 20,480 characters.
	// +kubebuilder:validation:Optional
	ExampleFailureResponse *string `json:"exampleFailureResponse,omitempty" tf:"example_failure_response,omitempty"`

	// Specifies the example response for a successful request. The length
	// cannot exceed 20,480 characters.
	// +kubebuilder:validation:Required
	ExampleSuccessResponse *string `json:"exampleSuccessResponse" tf:"example_success_response,omitempty"`

	// Specifies the configuration when backend_type selected 'FUNCTION' (documented
	// below).
	// +kubebuilder:validation:Optional
	FunctionBackend []FunctionBackendParameters `json:"functionBackend,omitempty" tf:"function_backend,omitempty"`

	// Specifies the ID of the API group. Changing this creates a new resource.
	// +crossplane:generate:reference:type=Group
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Reference to a Group to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDRef *v1.Reference `json:"groupIdRef,omitempty" tf:"-"`

	// Selector for a Group to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDSelector *v1.Selector `json:"groupIdSelector,omitempty" tf:"-"`

	// Specifies the configuration when backend_type selected 'HTTP' (documented below).
	// +kubebuilder:validation:Optional
	HTTPBackend []HTTPBackendParameters `json:"httpBackend,omitempty" tf:"http_backend,omitempty"`

	// Specifies the configuration when backend_type selected 'MOCK' (documented below).
	// +kubebuilder:validation:Optional
	MockBackend []MockBackendParameters `json:"mockBackend,omitempty" tf:"mock_backend,omitempty"`

	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The region in which to create the API resource. If omitted, the provider-level
	// region will be used. Changing this creates a new API resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the request method, including 'GET','POST','PUT' and etc..
	// +kubebuilder:validation:Required
	RequestMethod *string `json:"requestMethod" tf:"request_method,omitempty"`

	// the request parameter list (documented below).
	// +kubebuilder:validation:Optional
	RequestParameter []RequestParameterParameters `json:"requestParameter,omitempty" tf:"request_parameter,omitempty"`

	// Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
	// which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
	// +kubebuilder:validation:Optional
	RequestProtocol *string `json:"requestProtocol,omitempty" tf:"request_protocol,omitempty"`

	// Specifies the request path of the API. The value must comply with URI
	// specifications.
	// +kubebuilder:validation:Required
	RequestURI *string `json:"requestUri" tf:"request_uri,omitempty"`

	// the tags of API in format of string list.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the version of the API. A maximum of 16 characters are allowed.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// Specifies whether the API is available to the public. The value can only be 1 (public).
	// +kubebuilder:validation:Optional
	Visibility *float64 `json:"visibility,omitempty" tf:"visibility,omitempty"`
}

type BackendParameterObservation struct {
}

type BackendParameterParameters struct {

	// Specifies the description of the API. The description cannot exceed 255 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the input parameter location, which can be 'PATH', 'QUERY' or 'HEADER'.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the input parameter type, which can be 'STRING' or 'NUMBER'.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the parameter value, which is a string of not more than 255 characters. The
	// value varies depending on the parameter type:
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type FunctionBackendObservation struct {
}

type FunctionBackendParameters struct {

	// Specifies the function URN.
	// +kubebuilder:validation:Required
	FunctionUrn *string `json:"functionUrn" tf:"function_urn,omitempty"`

	// Specifies the invocation mode, which can be 'async' or 'sync'.
	// +kubebuilder:validation:Required
	InvocationType *string `json:"invocationType" tf:"invocation_type,omitempty"`

	// Timeout duration (in ms) for API Gateway to request for the backend service. Defaults to
	// 50000.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Specifies the version of the API. A maximum of 16 characters are allowed.
	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`
}

type HTTPBackendObservation struct {
}

type HTTPBackendParameters struct {

	// Specifies the backend request method, including 'GET','POST','PUT' and etc..
	// +kubebuilder:validation:Required
	Method *string `json:"method" tf:"method,omitempty"`

	// Specifies the backend request protocol. The value can be 'HTTP' and 'HTTPS'.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// Timeout duration (in ms) for API Gateway to request for the backend service. Defaults to
	// 50000.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Specifies the backend request path. The value must comply with URI specifications.
	// +kubebuilder:validation:Required
	URI *string `json:"uri" tf:"uri,omitempty"`

	// Specifies the backend service address. An endpoint URL is in the format of
	// "domain name (or IP address):port number", with up to 255 characters. This parameter and vpc_channel are
	// alternative.
	// +kubebuilder:validation:Optional
	URLDomain *string `json:"urlDomain,omitempty" tf:"url_domain,omitempty"`

	// Specifies the VPC channel ID. This parameter and url_domain are alternative.
	// +kubebuilder:validation:Optional
	VPCChannel *string `json:"vpcChannel,omitempty" tf:"vpc_channel,omitempty"`
}

type MockBackendObservation struct {
}

type MockBackendParameters struct {

	// Specifies the description of the API. The description cannot exceed 255 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the return result.
	// +kubebuilder:validation:Optional
	ResultContent *string `json:"resultContent,omitempty" tf:"result_content,omitempty"`

	// Specifies the version of the API. A maximum of 16 characters are allowed.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RequestParameterObservation struct {
}

type RequestParameterParameters struct {

	// Specifies the default value when the parameter is optional.
	// +kubebuilder:validation:Optional
	Default *string `json:"default,omitempty" tf:"default,omitempty"`

	// Specifies the description of the API. The description cannot exceed 255 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the input parameter location, which can be 'PATH', 'QUERY' or 'HEADER'.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies whether the parameter is mandatory or not.
	// +kubebuilder:validation:Required
	Required *bool `json:"required" tf:"required,omitempty"`

	// Specifies the input parameter type, which can be 'STRING' or 'NUMBER'.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// APISpec defines the desired state of API
type APISpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     APIParameters `json:"forProvider"`
}

// APIStatus defines the observed state of API.
type APIStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        APIObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// API is the Schema for the APIs API. ""page_title: "flexibleengine_api_gateway_api"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type API struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              APISpec   `json:"spec"`
	Status            APIStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// APIList contains a list of APIs
type APIList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []API `json:"items"`
}

// Repository type metadata.
var (
	API_Kind             = "API"
	API_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: API_Kind}.String()
	API_KindAPIVersion   = API_Kind + "." + CRDGroupVersion.String()
	API_GroupVersionKind = CRDGroupVersion.WithKind(API_Kind)
)

func init() {
	SchemeBuilder.Register(&API{}, &APIList{})
}
