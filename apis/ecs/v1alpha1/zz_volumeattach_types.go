/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VolumeAttachObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VolumeAttachParameters struct {

	// +kubebuilder:validation:Optional
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	VolumeID *string `json:"volumeId" tf:"volume_id,omitempty"`
}

// VolumeAttachSpec defines the desired state of VolumeAttach
type VolumeAttachSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolumeAttachParameters `json:"forProvider"`
}

// VolumeAttachStatus defines the observed state of VolumeAttach.
type VolumeAttachStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolumeAttachObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeAttach is the Schema for the VolumeAttachs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type VolumeAttach struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VolumeAttachSpec   `json:"spec"`
	Status            VolumeAttachStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeAttachList contains a list of VolumeAttachs
type VolumeAttachList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolumeAttach `json:"items"`
}

// Repository type metadata.
var (
	VolumeAttach_Kind             = "VolumeAttach"
	VolumeAttach_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolumeAttach_Kind}.String()
	VolumeAttach_KindAPIVersion   = VolumeAttach_Kind + "." + CRDGroupVersion.String()
	VolumeAttach_GroupVersionKind = CRDGroupVersion.WithKind(VolumeAttach_Kind)
)

func init() {
	SchemeBuilder.Register(&VolumeAttach{}, &VolumeAttachList{})
}
