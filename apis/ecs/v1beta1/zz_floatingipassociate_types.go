/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FloatingIpAssociateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FloatingIpAssociateParameters struct {

	// The specific IP address to direct traffic to.
	// +kubebuilder:validation:Optional
	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// The floating IP to associate.
	// +crossplane:generate:reference:type=github.com/FlexibleEngineCloud/provider-flexibleengine/apis/eip/v1beta1.EIP
	// +crossplane:generate:reference:extractor=github.com/FlexibleEngineCloud/provider-flexibleengine/config/common.AddressExtractor()
	// +kubebuilder:validation:Optional
	FloatingIP *string `json:"floatingIp,omitempty" tf:"floating_ip,omitempty"`

	// Reference to a EIP in eip to populate floatingIp.
	// +kubebuilder:validation:Optional
	FloatingIPRef *v1.Reference `json:"floatingIpRef,omitempty" tf:"-"`

	// Selector for a EIP in eip to populate floatingIp.
	// +kubebuilder:validation:Optional
	FloatingIPSelector *v1.Selector `json:"floatingIpSelector,omitempty" tf:"-"`

	// The instance to associte the floating IP with.
	// +crossplane:generate:reference:type=github.com/FlexibleEngineCloud/provider-flexibleengine/apis/ecs/v1beta1.Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// The region in which to obtain the V2 Compute client.
	// Keypairs are associated with accounts, but a Compute client is needed to
	// create one. If omitted, the region argument of the provider is used.
	// Changing this creates a new floatingip_associate.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// FloatingIpAssociateSpec defines the desired state of FloatingIpAssociate
type FloatingIpAssociateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FloatingIpAssociateParameters `json:"forProvider"`
}

// FloatingIpAssociateStatus defines the observed state of FloatingIpAssociate.
type FloatingIpAssociateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FloatingIpAssociateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FloatingIpAssociate is the Schema for the FloatingIpAssociates API. ""page_title: "flexibleengine_compute_floatingip_associate_v2"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type FloatingIpAssociate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FloatingIpAssociateSpec   `json:"spec"`
	Status            FloatingIpAssociateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FloatingIpAssociateList contains a list of FloatingIpAssociates
type FloatingIpAssociateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FloatingIpAssociate `json:"items"`
}

// Repository type metadata.
var (
	FloatingIpAssociate_Kind             = "FloatingIpAssociate"
	FloatingIpAssociate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FloatingIpAssociate_Kind}.String()
	FloatingIpAssociate_KindAPIVersion   = FloatingIpAssociate_Kind + "." + CRDGroupVersion.String()
	FloatingIpAssociate_GroupVersionKind = CRDGroupVersion.WithKind(FloatingIpAssociate_Kind)
)

func init() {
	SchemeBuilder.Register(&FloatingIpAssociate{}, &FloatingIpAssociateList{})
}
