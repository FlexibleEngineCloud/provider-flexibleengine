/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FloatingIpObservation struct {

	// The actual floating IP address itself.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The fixed IP address corresponding to the floating IP.
	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// UUID of the compute instance associated with the floating IP.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`
}

type FloatingIpParameters struct {

	// The name of the pool from which to obtain the floating
	// IP. Default value is admin_external_net. Changing this creates a new floating IP.
	// +kubebuilder:validation:Optional
	Pool *string `json:"pool,omitempty" tf:"pool,omitempty"`

	// The region in which to obtain the V2 Compute client.
	// A Compute client is needed to create a floating IP that can be used with
	// a compute instance. If omitted, the region argument of the provider
	// is used. Changing this creates a new floating IP (which may or may not
	// have a different address).
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// FloatingIpSpec defines the desired state of FloatingIp
type FloatingIpSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FloatingIpParameters `json:"forProvider"`
}

// FloatingIpStatus defines the observed state of FloatingIp.
type FloatingIpStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FloatingIpObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FloatingIp is the Schema for the FloatingIps API. ""page_title: "flexibleengine_compute_floatingip_v2"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type FloatingIp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FloatingIpSpec   `json:"spec"`
	Status            FloatingIpStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FloatingIpList contains a list of FloatingIps
type FloatingIpList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FloatingIp `json:"items"`
}

// Repository type metadata.
var (
	FloatingIp_Kind             = "FloatingIp"
	FloatingIp_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FloatingIp_Kind}.String()
	FloatingIp_KindAPIVersion   = FloatingIp_Kind + "." + CRDGroupVersion.String()
	FloatingIp_GroupVersionKind = CRDGroupVersion.WithKind(FloatingIp_Kind)
)

func init() {
	SchemeBuilder.Register(&FloatingIp{}, &FloatingIpList{})
}
