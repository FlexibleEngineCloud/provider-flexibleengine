/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RuleDataMaskingObservation struct {

	// The rule ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RuleDataMaskingParameters struct {

	// Specifies the masked field. The options are params and header.
	// +kubebuilder:validation:Required
	Field *string `json:"field" tf:"field,omitempty"`

	// Specifies the URL to which the data masking rule applies (exact match by default).
	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`

	// Specifies the WAF policy ID. Changing this creates a new rule.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/waf/v1beta1.Policy
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Reference to a Policy in waf to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDRef *v1.Reference `json:"policyIdRef,omitempty" tf:"-"`

	// Selector for a Policy in waf to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDSelector *v1.Selector `json:"policyIdSelector,omitempty" tf:"-"`

	// Specifies the masked subfield.
	// +kubebuilder:validation:Required
	Subfield *string `json:"subfield" tf:"subfield,omitempty"`
}

// RuleDataMaskingSpec defines the desired state of RuleDataMasking
type RuleDataMaskingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleDataMaskingParameters `json:"forProvider"`
}

// RuleDataMaskingStatus defines the observed state of RuleDataMasking.
type RuleDataMaskingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleDataMaskingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RuleDataMasking is the Schema for the RuleDataMaskings API. ""page_title: "flexibleengine_waf_rule_data_masking"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type RuleDataMasking struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleDataMaskingSpec   `json:"spec"`
	Status            RuleDataMaskingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleDataMaskingList contains a list of RuleDataMaskings
type RuleDataMaskingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RuleDataMasking `json:"items"`
}

// Repository type metadata.
var (
	RuleDataMasking_Kind             = "RuleDataMasking"
	RuleDataMasking_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RuleDataMasking_Kind}.String()
	RuleDataMasking_KindAPIVersion   = RuleDataMasking_Kind + "." + CRDGroupVersion.String()
	RuleDataMasking_GroupVersionKind = CRDGroupVersion.WithKind(RuleDataMasking_Kind)
)

func init() {
	SchemeBuilder.Register(&RuleDataMasking{}, &RuleDataMaskingList{})
}
