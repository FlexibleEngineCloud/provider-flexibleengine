/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainObservation struct {

	// Whether a domain name is connected to WAF.
	AccessStatus *float64 `json:"accessStatus,omitempty" tf:"access_status,omitempty"`

	// The CNAME value.
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`

	// ID of the domain.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The WAF mode. -1: bypassed, 0: disabled, 1: enabled.
	ProtectStatus *float64 `json:"protectStatus,omitempty" tf:"protect_status,omitempty"`

	// The protocol type of the client. The options are HTTP, HTTPS, and HTTP&HTTPS.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The subdomain name. This attribute is returned only when proxy is set to true.
	SubDomain *string `json:"subDomain,omitempty" tf:"sub_domain,omitempty"`

	// The TXT record. This attribute is returned only when proxy is set to true.
	TxtCode *string `json:"txtCode,omitempty" tf:"txt_code,omitempty"`
}

type DomainParameters struct {

	// Specifies the certificate ID.
	// This parameter is mandatory when client_protocol is set to HTTPS.
	// +crossplane:generate:reference:type=Certificate
	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// Reference to a Certificate to populate certificateId.
	// +kubebuilder:validation:Optional
	CertificateIDRef *v1.Reference `json:"certificateIdRef,omitempty" tf:"-"`

	// Selector for a Certificate to populate certificateId.
	// +kubebuilder:validation:Optional
	CertificateIDSelector *v1.Selector `json:"certificateIdSelector,omitempty" tf:"-"`

	// Specifies the domain name to be protected. For example, www.example.com or *.example.com.
	// Changing this creates a new domain.
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// +kubebuilder:validation:Optional
	KeepPolicy *bool `json:"keepPolicy,omitempty" tf:"keep_policy,omitempty"`

	// Specifies the policy ID associated with the domain.
	// If not specified, a new policy will be created automatically. Changing this create a new domain.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/waf/v1beta1.Policy
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Reference to a Policy in waf to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDRef *v1.Reference `json:"policyIdRef,omitempty" tf:"-"`

	// Selector for a Policy in waf to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDSelector *v1.Selector `json:"policyIdSelector,omitempty" tf:"-"`

	// Specifies whether a proxy is configured.
	// +kubebuilder:validation:Optional
	Proxy *bool `json:"proxy,omitempty" tf:"proxy,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies an array of HTTP request header for identifying the real source IP address.
	// This parameter is required only when proxy is set to true.
	// +kubebuilder:validation:Optional
	SIPHeaderList []*string `json:"sipHeaderList,omitempty" tf:"sip_header_list,omitempty"`

	// Specifies the type of the source IP header.
	// This parameter is required only when proxy is set to true. The options are as follows:
	// default, cloudflare, akamai, and custom.
	// +kubebuilder:validation:Optional
	SIPHeaderName *string `json:"sipHeaderName,omitempty" tf:"sip_header_name,omitempty"`

	// Specifies an array of origin web servers. The object structure is documented below.
	// +kubebuilder:validation:Required
	Server []DomainServerParameters `json:"server" tf:"server,omitempty"`
}

type DomainServerObservation struct {
}

type DomainServerParameters struct {

	// IP address or domain name of the web server that the client accesses.
	// For example, 192.168.1.1 or www.a.com.
	// +kubebuilder:validation:Required
	Address *string `json:"address" tf:"address,omitempty"`

	// Protocol type of the client. The options are HTTP and HTTPS.
	// +kubebuilder:validation:Optional
	ClientProtocol *string `json:"clientProtocol,omitempty" tf:"client_protocol,omitempty"`

	// Port number used by the web server. The value ranges from 0 to 65535, for example, 8080.
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Protocol used by WAF to forward client requests to the server.
	// The options are HTTP and HTTPS.
	// +kubebuilder:validation:Optional
	ServerProtocol *string `json:"serverProtocol,omitempty" tf:"server_protocol,omitempty"`
}

// DomainSpec defines the desired state of Domain
type DomainSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainParameters `json:"forProvider"`
}

// DomainStatus defines the observed state of Domain.
type DomainStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Domain is the Schema for the Domains API. ""page_title: "flexibleengine_waf_domain"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Domain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainSpec   `json:"spec"`
	Status            DomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainList contains a list of Domains
type DomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Domain `json:"items"`
}

// Repository type metadata.
var (
	Domain_Kind             = "Domain"
	Domain_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Domain_Kind}.String()
	Domain_KindAPIVersion   = Domain_Kind + "." + CRDGroupVersion.String()
	Domain_GroupVersionKind = CRDGroupVersion.WithKind(Domain_Kind)
)

func init() {
	SchemeBuilder.Register(&Domain{}, &DomainList{})
}
