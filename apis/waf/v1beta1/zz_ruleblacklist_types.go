/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RuleBlacklistObservation struct {

	// The rule ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RuleBlacklistParameters struct {

	// Specifies the protective action. 1: Whitelist, 0: Blacklist.
	// If you do not configure the parameter, the value is Blacklist by default.
	// +kubebuilder:validation:Optional
	Action *float64 `json:"action,omitempty" tf:"action,omitempty"`

	// Specifies the IP address or range. For example, 192.168.0.125 or 192.168.0.0/24.
	// +kubebuilder:validation:Required
	Address *string `json:"address" tf:"address,omitempty"`

	// Specifies the WAF policy ID. Changing this creates a new rule.
	// +crossplane:generate:reference:type=Policy
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Reference to a Policy to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDRef *v1.Reference `json:"policyIdRef,omitempty" tf:"-"`

	// Selector for a Policy to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDSelector *v1.Selector `json:"policyIdSelector,omitempty" tf:"-"`
}

// RuleBlacklistSpec defines the desired state of RuleBlacklist
type RuleBlacklistSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleBlacklistParameters `json:"forProvider"`
}

// RuleBlacklistStatus defines the observed state of RuleBlacklist.
type RuleBlacklistStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleBlacklistObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RuleBlacklist is the Schema for the RuleBlacklists API. ""page_title: "flexibleengine_waf_rule_blacklist"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type RuleBlacklist struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleBlacklistSpec   `json:"spec"`
	Status            RuleBlacklistStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleBlacklistList contains a list of RuleBlacklists
type RuleBlacklistList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RuleBlacklist `json:"items"`
}

// Repository type metadata.
var (
	RuleBlacklist_Kind             = "RuleBlacklist"
	RuleBlacklist_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RuleBlacklist_Kind}.String()
	RuleBlacklist_KindAPIVersion   = RuleBlacklist_Kind + "." + CRDGroupVersion.String()
	RuleBlacklist_GroupVersionKind = CRDGroupVersion.WithKind(RuleBlacklist_Kind)
)

func init() {
	SchemeBuilder.Register(&RuleBlacklist{}, &RuleBlacklistList{})
}
