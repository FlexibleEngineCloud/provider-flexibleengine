/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DedicatedInstanceObservation struct {

	// The access status of the instance. 0: inaccessible, 1: accessible.
	AccessStatus *float64 `json:"accessStatus,omitempty" tf:"access_status,omitempty"`

	// The id of the instance.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The running status of the instance. Values are:
	RunStatus *float64 `json:"runStatus,omitempty" tf:"run_status,omitempty"`

	// The id of the instance server.
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// The ip of the instance service.
	ServiceIP *string `json:"serviceIp,omitempty" tf:"service_ip,omitempty"`

	// The instance is to support upgrades. 0: Cannot be upgraded, 1: Can be upgraded.
	Upgradable *float64 `json:"upgradable,omitempty" tf:"upgradable,omitempty"`
}

type DedicatedInstanceParameters struct {

	// The available zone names for the dedicated instances. It can be
	// obtained through this data source flexibleengine_availability_zones. Changing this will create a new instance.
	// +kubebuilder:validation:Required
	AvailableZone *string `json:"availableZone" tf:"available_zone,omitempty"`

	// The ECS cpu architecture of instance, Default value is x86.
	// Changing this will create a new instance.
	// +kubebuilder:validation:Optional
	CPUArchitecture *string `json:"cpuArchitecture,omitempty" tf:"cpu_architecture,omitempty"`

	// The flavor of the ECS used by the WAF instance. Flavors can be obtained
	// through this data source flexibleengine_compute_flavors. Changing this will create a new instance.
	// +kubebuilder:validation:Required
	EcsFlavor *string `json:"ecsFlavor" tf:"ecs_flavor,omitempty"`

	// The instance group ID used by the WAF dedicated instance in ELB mode.
	// Changing this will create a new instance.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/ecs/v1beta1.ServerGroup
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Reference to a ServerGroup in ecs to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDRef *v1.Reference `json:"groupIdRef,omitempty" tf:"-"`

	// Selector for a ServerGroup in ecs to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDSelector *v1.Selector `json:"groupIdSelector,omitempty" tf:"-"`

	// The name of WAF dedicated instance. Duplicate names are allowed, we suggest to keeping the
	// name unique.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The region in which to create the WAF dedicated instance. If omitted, the
	// provider-level region will be used. Changing this setting will create a new instance.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The security group of the instance. This is an array of security group
	// ids. Changing this will create a new instance.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1.SecGroup
	// +kubebuilder:validation:Optional
	SecurityGroup []*string `json:"securityGroup,omitempty" tf:"security_group,omitempty"`

	// References to SecGroup in vpc to populate securityGroup.
	// +kubebuilder:validation:Optional
	SecurityGroupRefs []v1.Reference `json:"securityGroupRefs,omitempty" tf:"-"`

	// Selector for a list of SecGroup in vpc to populate securityGroup.
	// +kubebuilder:validation:Optional
	SecurityGroupSelector *v1.Selector `json:"securityGroupSelector,omitempty" tf:"-"`

	// The specification code of instance. Different specifications have
	// different throughput. Changing this will create a new instance. Values are:
	// +kubebuilder:validation:Required
	SpecificationCode *string `json:"specificationCode" tf:"specification_code,omitempty"`

	// The subnet id of WAF dedicated instance VPC. Changing this will create a
	// new instance.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1.VPCSubnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a VPCSubnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a VPCSubnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// The VPC id of WAF dedicated instance. Changing this will create a new
	// instance.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// DedicatedInstanceSpec defines the desired state of DedicatedInstance
type DedicatedInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DedicatedInstanceParameters `json:"forProvider"`
}

// DedicatedInstanceStatus defines the observed state of DedicatedInstance.
type DedicatedInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DedicatedInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedInstance is the Schema for the DedicatedInstances API. ""page_title: "flexibleengine_waf_dedicated_instance"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type DedicatedInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DedicatedInstanceSpec   `json:"spec"`
	Status            DedicatedInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedInstanceList contains a list of DedicatedInstances
type DedicatedInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DedicatedInstance `json:"items"`
}

// Repository type metadata.
var (
	DedicatedInstance_Kind             = "DedicatedInstance"
	DedicatedInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DedicatedInstance_Kind}.String()
	DedicatedInstance_KindAPIVersion   = DedicatedInstance_Kind + "." + CRDGroupVersion.String()
	DedicatedInstance_GroupVersionKind = CRDGroupVersion.WithKind(DedicatedInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&DedicatedInstance{}, &DedicatedInstanceList{})
}
