/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RuleAlarmMaskingObservation struct {

	// The event type.
	EventType *string `json:"eventType,omitempty" tf:"event_type,omitempty"`

	// The rule ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RuleAlarmMaskingParameters struct {

	// Specifies the event ID. It is the ID of a misreported event
	// in Events whose type is not Custom.
	// +kubebuilder:validation:Required
	EventID *string `json:"eventId" tf:"event_id,omitempty"`

	// Specifies a misreported URL excluding a domain name.
	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`

	// Specifies the WAF policy ID. Changing this creates a new rule.
	// +crossplane:generate:reference:type=github.com/FlexibleEngineCloud/provider-flexibleengine/apis/waf/v1beta1.Policy
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Reference to a Policy in waf to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDRef *v1.Reference `json:"policyIdRef,omitempty" tf:"-"`

	// Selector for a Policy in waf to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDSelector *v1.Selector `json:"policyIdSelector,omitempty" tf:"-"`
}

// RuleAlarmMaskingSpec defines the desired state of RuleAlarmMasking
type RuleAlarmMaskingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleAlarmMaskingParameters `json:"forProvider"`
}

// RuleAlarmMaskingStatus defines the observed state of RuleAlarmMasking.
type RuleAlarmMaskingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleAlarmMaskingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RuleAlarmMasking is the Schema for the RuleAlarmMaskings API. ""page_title: "flexibleengine_waf_rule_alarm_masking"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type RuleAlarmMasking struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleAlarmMaskingSpec   `json:"spec"`
	Status            RuleAlarmMaskingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleAlarmMaskingList contains a list of RuleAlarmMaskings
type RuleAlarmMaskingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RuleAlarmMasking `json:"items"`
}

// Repository type metadata.
var (
	RuleAlarmMasking_Kind             = "RuleAlarmMasking"
	RuleAlarmMasking_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RuleAlarmMasking_Kind}.String()
	RuleAlarmMasking_KindAPIVersion   = RuleAlarmMasking_Kind + "." + CRDGroupVersion.String()
	RuleAlarmMasking_GroupVersionKind = CRDGroupVersion.WithKind(RuleAlarmMasking_Kind)
)

func init() {
	SchemeBuilder.Register(&RuleAlarmMasking{}, &RuleAlarmMaskingList{})
}
