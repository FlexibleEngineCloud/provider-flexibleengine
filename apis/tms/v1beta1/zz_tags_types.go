/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TagsObservation struct {

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TagsParameters struct {

	// Specifies an array of one or more predefined tags. The tags object
	// structure is documented below. Changing this will create a new resource.
	// +kubebuilder:validation:Required
	Tags []TagsTagsParameters `json:"tags" tf:"tags,omitempty"`
}

type TagsTagsObservation struct {
}

type TagsTagsParameters struct {

	// Specifies the tag key. The value can contain up to 36 characters.
	// Only letters, digits, hyphens (-), underscores (_), and Unicode characters from \u4e00 to \u9fff are allowed.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// Specifies the tag value. The value can contain up to 43 characters.
	// Only letters, digits, periods (.), hyphens (-), and underscores (_), and Unicode characters from \u4e00 to \u9fff
	// are allowed. Changing this will create a new resource.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// TagsSpec defines the desired state of Tags
type TagsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TagsParameters `json:"forProvider"`
}

// TagsStatus defines the observed state of Tags.
type TagsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TagsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Tags is the Schema for the Tagss API. ""page_title: "flexibleengine_tms_tags"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Tags struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TagsSpec   `json:"spec"`
	Status            TagsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TagsList contains a list of Tagss
type TagsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Tags `json:"items"`
}

// Repository type metadata.
var (
	Tags_Kind             = "Tags"
	Tags_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Tags_Kind}.String()
	Tags_KindAPIVersion   = Tags_Kind + "." + CRDGroupVersion.String()
	Tags_GroupVersionKind = CRDGroupVersion.WithKind(Tags_Kind)
)

func init() {
	SchemeBuilder.Register(&Tags{}, &TagsList{})
}
