/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrganizationUsersObservation struct {

	// The creator user name of the organization.
	Creator *string `json:"creator,omitempty" tf:"creator,omitempty"`

	// ID of the resource. The value is the name of the organization.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The permission informations of current user.
	SelfPermission []SelfPermissionObservation `json:"selfPermission,omitempty" tf:"self_permission,omitempty"`
}

type OrganizationUsersParameters struct {

	// Specifies the name of the organization (namespace) to be accessed.
	// Changing this creates a new resource.
	// +crossplane:generate:reference:type=Organization
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Reference to a Organization to populate organization.
	// +kubebuilder:validation:Optional
	OrganizationRef *v1.Reference `json:"organizationRef,omitempty" tf:"-"`

	// Selector for a Organization to populate organization.
	// +kubebuilder:validation:Optional
	OrganizationSelector *v1.Selector `json:"organizationSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the users to access to the organization (namespace).
	// Structure is documented below.
	// +kubebuilder:validation:Required
	Users []UsersParameters `json:"users" tf:"users,omitempty"`
}

type SelfPermissionObservation struct {

	// The permission of current user.
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// The ID of current user.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// The name of current user.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type SelfPermissionParameters struct {
}

type UsersObservation struct {
}

type UsersParameters struct {

	// Specifies the permission of the existing IAM user.
	// The values can be Manage, Write and Read.
	// +kubebuilder:validation:Required
	Permission *string `json:"permission" tf:"permission,omitempty"`

	// Specifies the ID of the existing IAM user.
	// +kubebuilder:validation:Required
	UserID *string `json:"userId" tf:"user_id,omitempty"`

	// Specifies the name of the existing IAM user.
	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

// OrganizationUsersSpec defines the desired state of OrganizationUsers
type OrganizationUsersSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganizationUsersParameters `json:"forProvider"`
}

// OrganizationUsersStatus defines the observed state of OrganizationUsers.
type OrganizationUsersStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganizationUsersObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationUsers is the Schema for the OrganizationUserss API. ""page_title: "flexibleengine_swr_organization_users"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type OrganizationUsers struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OrganizationUsersSpec   `json:"spec"`
	Status            OrganizationUsersStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationUsersList contains a list of OrganizationUserss
type OrganizationUsersList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganizationUsers `json:"items"`
}

// Repository type metadata.
var (
	OrganizationUsers_Kind             = "OrganizationUsers"
	OrganizationUsers_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrganizationUsers_Kind}.String()
	OrganizationUsers_KindAPIVersion   = OrganizationUsers_Kind + "." + CRDGroupVersion.String()
	OrganizationUsers_GroupVersionKind = CRDGroupVersion.WithKind(OrganizationUsers_Kind)
)

func init() {
	SchemeBuilder.Register(&OrganizationUsers{}, &OrganizationUsersList{})
}
