/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RepositorySharingObservation struct {

	// ID of the repository sharing. The value is the value of sharing_account.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates the repository sharing is valid (true) or expired (false).
	Status *bool `json:"status,omitempty" tf:"status,omitempty"`
}

type RepositorySharingParameters struct {

	// Specifies the end date of image sharing (UTC time in YYYY-MM-DD format,
	// for example 2021-10-01). When the value is set to forever, the image will be permanently available for the domain.
	// The validity period is calculated by day. The shared images expire at 00:00:00 on the day after the end date.
	// +kubebuilder:validation:Required
	Deadline *string `json:"deadline" tf:"deadline,omitempty"`

	// Specifies the description of the repository sharing.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the name of the organization (namespace) the repository belongs.
	// Changing this creates a new resource.
	// +crossplane:generate:reference:type=Organization
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Reference to a Organization to populate organization.
	// +kubebuilder:validation:Optional
	OrganizationRef *v1.Reference `json:"organizationRef,omitempty" tf:"-"`

	// Selector for a Organization to populate organization.
	// +kubebuilder:validation:Optional
	OrganizationSelector *v1.Selector `json:"organizationSelector,omitempty" tf:"-"`

	// Specifies the permission to be granted. Currently, only the pull permission is supported.
	// Default value is pull.
	// +kubebuilder:validation:Optional
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the name of the repository to be shared.
	// Changing this creates a new resource.
	// +crossplane:generate:reference:type=github.com/gaetanars/provider-flexibleengine/apis/iam/v1beta1.User
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a User in iam to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a User in iam to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`

	// Specifies the name of the account for repository sharing.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Required
	SharingAccount *string `json:"sharingAccount" tf:"sharing_account,omitempty"`
}

// RepositorySharingSpec defines the desired state of RepositorySharing
type RepositorySharingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositorySharingParameters `json:"forProvider"`
}

// RepositorySharingStatus defines the observed state of RepositorySharing.
type RepositorySharingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositorySharingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RepositorySharing is the Schema for the RepositorySharings API. ""page_title: "flexibleengine_swr_repository_sharing"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type RepositorySharing struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RepositorySharingSpec   `json:"spec"`
	Status            RepositorySharingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositorySharingList contains a list of RepositorySharings
type RepositorySharingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RepositorySharing `json:"items"`
}

// Repository type metadata.
var (
	RepositorySharing_Kind             = "RepositorySharing"
	RepositorySharing_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RepositorySharing_Kind}.String()
	RepositorySharing_KindAPIVersion   = RepositorySharing_Kind + "." + CRDGroupVersion.String()
	RepositorySharing_GroupVersionKind = CRDGroupVersion.WithKind(RepositorySharing_Kind)
)

func init() {
	SchemeBuilder.Register(&RepositorySharing{}, &RepositorySharingList{})
}
