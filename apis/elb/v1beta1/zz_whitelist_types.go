/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WhitelistObservation struct {

	// The unique ID for the whitelist.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type WhitelistParameters struct {

	// Specify whether to enable access control.
	// +kubebuilder:validation:Optional
	EnableWhitelist *bool `json:"enableWhitelist,omitempty" tf:"enable_whitelist,omitempty"`

	// The Listener ID that the whitelist will be associated with.
	// Changing this creates a new whitelist.
	// +crossplane:generate:reference:type=Listener
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// Reference to a Listener to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDRef *v1.Reference `json:"listenerIdRef,omitempty" tf:"-"`

	// Selector for a Listener to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDSelector *v1.Selector `json:"listenerIdSelector,omitempty" tf:"-"`

	// The UUID of the tenant who owns the whitelist.
	// Only administrative users can specify a tenant UUID other than their own.
	// Changing this creates a new whitelist.
	// +crossplane:generate:reference:type=github.com/gaetanars/provider-flexibleengine/apis/iam/v1beta1.Project
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Reference to a Project in iam to populate tenantId.
	// +kubebuilder:validation:Optional
	TenantIDRef *v1.Reference `json:"tenantIdRef,omitempty" tf:"-"`

	// Selector for a Project in iam to populate tenantId.
	// +kubebuilder:validation:Optional
	TenantIDSelector *v1.Selector `json:"tenantIdSelector,omitempty" tf:"-"`

	// Specifies the IP addresses in the whitelist. Use commas(,) to separate
	// the multiple IP addresses.
	// +kubebuilder:validation:Optional
	Whitelist *string `json:"whitelist,omitempty" tf:"whitelist,omitempty"`
}

// WhitelistSpec defines the desired state of Whitelist
type WhitelistSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WhitelistParameters `json:"forProvider"`
}

// WhitelistStatus defines the observed state of Whitelist.
type WhitelistStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WhitelistObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Whitelist is the Schema for the Whitelists API. ""page_title: "flexibleengine_lb_whitelist_v2"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Whitelist struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WhitelistSpec   `json:"spec"`
	Status            WhitelistStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WhitelistList contains a list of Whitelists
type WhitelistList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Whitelist `json:"items"`
}

// Repository type metadata.
var (
	Whitelist_Kind             = "Whitelist"
	Whitelist_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Whitelist_Kind}.String()
	Whitelist_KindAPIVersion   = Whitelist_Kind + "." + CRDGroupVersion.String()
	Whitelist_GroupVersionKind = CRDGroupVersion.WithKind(Whitelist_Kind)
)

func init() {
	SchemeBuilder.Register(&Whitelist{}, &WhitelistList{})
}
