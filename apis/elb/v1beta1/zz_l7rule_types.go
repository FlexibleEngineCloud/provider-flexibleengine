/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L7RuleObservation struct {

	// The unique ID for the L7 Rule.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the Listener owning this resource.
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`
}

type L7RuleParameters struct {

	// The administrative state of the L7 Rule.
	// The value can only be true (UP).
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// The comparison type for the L7 rule - can either be
	// STARTS_WITH, EQUAL_TO or REGEX
	// +kubebuilder:validation:Required
	CompareType *string `json:"compareType" tf:"compare_type,omitempty"`

	// The key to use for the comparison. For example, the name of the cookie to
	// evaluate. Valid when type is set to COOKIE or HEADER. Changing this creates a new L7 Rule.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The ID of the L7 Policy to query. Changing this creates a new
	// L7 Rule.
	// +crossplane:generate:reference:type=L7Policy
	// +kubebuilder:validation:Optional
	L7PolicyID *string `json:"l7policyId,omitempty" tf:"l7policy_id,omitempty"`

	// Reference to a L7Policy to populate l7policyId.
	// +kubebuilder:validation:Optional
	L7PolicyIDRef *v1.Reference `json:"l7policyIdRef,omitempty" tf:"-"`

	// Selector for a L7Policy to populate l7policyId.
	// +kubebuilder:validation:Optional
	L7PolicyIDSelector *v1.Selector `json:"l7policyIdSelector,omitempty" tf:"-"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an . If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// L7 Rule.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The UUID of the tenant who owns the L7 Rule.
	// Only administrative users can specify a tenant UUID other than their own.
	// Changing this creates a new L7 Rule.
	// +crossplane:generate:reference:type=github.com/gaetanars/provider-flexibleengine/apis/iam/v1beta1.Project
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Reference to a Project in iam to populate tenantId.
	// +kubebuilder:validation:Optional
	TenantIDRef *v1.Reference `json:"tenantIdRef,omitempty" tf:"-"`

	// Selector for a Project in iam to populate tenantId.
	// +kubebuilder:validation:Optional
	TenantIDSelector *v1.Selector `json:"tenantIdSelector,omitempty" tf:"-"`

	// The L7 Rule type - can either be HOST_NAME or PATH.
	// Changing this creates a new L7 Rule.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// The value to use for the comparison. For example, the file type to
	// compare.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// L7RuleSpec defines the desired state of L7Rule
type L7RuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L7RuleParameters `json:"forProvider"`
}

// L7RuleStatus defines the observed state of L7Rule.
type L7RuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L7RuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L7Rule is the Schema for the L7Rules API. ""page_title: "flexibleengine_lb_l7rule_v2"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type L7Rule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              L7RuleSpec   `json:"spec"`
	Status            L7RuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L7RuleList contains a list of L7Rules
type L7RuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L7Rule `json:"items"`
}

// Repository type metadata.
var (
	L7Rule_Kind             = "L7Rule"
	L7Rule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L7Rule_Kind}.String()
	L7Rule_KindAPIVersion   = L7Rule_Kind + "." + CRDGroupVersion.String()
	L7Rule_GroupVersionKind = CRDGroupVersion.WithKind(L7Rule_Kind)
)

func init() {
	SchemeBuilder.Register(&L7Rule{}, &L7RuleList{})
}
