/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L7PolicyObservation struct {

	// The unique ID for the L7 {olicy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type L7PolicyParameters struct {

	// The L7 Policy action - can either be REDIRECT_TO_POOL,
	// or REDIRECT_TO_LISTENER. Changing this creates a new L7 Policy.
	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// The administrative state of the L7 Policy.
	// This value can only be true (UP).
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// Human-readable description for the L7 Policy.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The Listener on which the L7 Policy will be associated with.
	// Changing this creates a new L7 Policy.
	// +crossplane:generate:reference:type=Listener
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// Reference to a Listener to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDRef *v1.Reference `json:"listenerIdRef,omitempty" tf:"-"`

	// Selector for a Listener to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDSelector *v1.Selector `json:"listenerIdSelector,omitempty" tf:"-"`

	// Human-readable name for the L7 Policy. Does not have
	// to be unique.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The position of this policy on the listener. Positions start at 1.
	// Changing this creates a new L7 Policy.
	// +kubebuilder:validation:Optional
	Position *float64 `json:"position,omitempty" tf:"position,omitempty"`

	// Requests matching this policy will be redirected to
	// the listener with this ID. Only valid if action is REDIRECT_TO_LISTENER.
	// +crossplane:generate:reference:type=Listener
	// +kubebuilder:validation:Optional
	RedirectListenerID *string `json:"redirectListenerId,omitempty" tf:"redirect_listener_id,omitempty"`

	// Reference to a Listener to populate redirectListenerId.
	// +kubebuilder:validation:Optional
	RedirectListenerIDRef *v1.Reference `json:"redirectListenerIdRef,omitempty" tf:"-"`

	// Selector for a Listener to populate redirectListenerId.
	// +kubebuilder:validation:Optional
	RedirectListenerIDSelector *v1.Selector `json:"redirectListenerIdSelector,omitempty" tf:"-"`

	// Requests matching this policy will be redirected to
	// the pool with this ID. Only valid if action is REDIRECT_TO_POOL.
	// +crossplane:generate:reference:type=Pool
	// +kubebuilder:validation:Optional
	RedirectPoolID *string `json:"redirectPoolId,omitempty" tf:"redirect_pool_id,omitempty"`

	// Reference to a Pool to populate redirectPoolId.
	// +kubebuilder:validation:Optional
	RedirectPoolIDRef *v1.Reference `json:"redirectPoolIdRef,omitempty" tf:"-"`

	// Selector for a Pool to populate redirectPoolId.
	// +kubebuilder:validation:Optional
	RedirectPoolIDSelector *v1.Selector `json:"redirectPoolIdSelector,omitempty" tf:"-"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an . If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// L7 Policy.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The UUID of the tenant who owns the L7 Policy.
	// Only administrative users can specify a tenant UUID other than their own.
	// Changing this creates a new L7 Policy.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/iam/v1beta1.Project
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Reference to a Project in iam to populate tenantId.
	// +kubebuilder:validation:Optional
	TenantIDRef *v1.Reference `json:"tenantIdRef,omitempty" tf:"-"`

	// Selector for a Project in iam to populate tenantId.
	// +kubebuilder:validation:Optional
	TenantIDSelector *v1.Selector `json:"tenantIdSelector,omitempty" tf:"-"`
}

// L7PolicySpec defines the desired state of L7Policy
type L7PolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L7PolicyParameters `json:"forProvider"`
}

// L7PolicyStatus defines the observed state of L7Policy.
type L7PolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L7PolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L7Policy is the Schema for the L7Policys API. ""page_title: "flexibleengine_lb_l7policy_v2"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type L7Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              L7PolicySpec   `json:"spec"`
	Status            L7PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L7PolicyList contains a list of L7Policys
type L7PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L7Policy `json:"items"`
}

// Repository type metadata.
var (
	L7Policy_Kind             = "L7Policy"
	L7Policy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L7Policy_Kind}.String()
	L7Policy_KindAPIVersion   = L7Policy_Kind + "." + CRDGroupVersion.String()
	L7Policy_GroupVersionKind = CRDGroupVersion.WithKind(L7Policy_Kind)
)

func init() {
	SchemeBuilder.Register(&L7Policy{}, &L7PolicyList{})
}
