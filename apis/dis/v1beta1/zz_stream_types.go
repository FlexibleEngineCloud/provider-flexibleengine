/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PartitionsObservation struct {

	// Possible value range of the hash key used by each partition.
	HashRange *string `json:"hashRange,omitempty" tf:"hash_range,omitempty"`

	// The ID of the partition.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Sequence number range of each partition.
	SequenceNumberRange *string `json:"sequenceNumberRange,omitempty" tf:"sequence_number_range,omitempty"`

	// The status of the partition.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type PartitionsParameters struct {
}

type StreamObservation struct {

	// The resource ID which equals to stream name.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The information of stream partitions. Structure is documented below.
	Partitions []PartitionsObservation `json:"partitions,omitempty" tf:"partitions,omitempty"`

	// Status of stream: CREATING,RUNNING,TERMINATING,TERMINATED,FROZEN.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type StreamParameters struct {

	// +kubebuilder:validation:Optional
	DataDuration *float64 `json:"dataDuration,omitempty" tf:"data_duration,omitempty"`

	// Specifies the name of the DIS stream to be created.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the number of the expect partitions.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Required
	PartitionCount *float64 `json:"partitionCount" tf:"partition_count,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the Stream type. The value can be COMMON or ADVANCED.
	// Defaults to COMMON. Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// StreamSpec defines the desired state of Stream
type StreamSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StreamParameters `json:"forProvider"`
}

// StreamStatus defines the observed state of Stream.
type StreamStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StreamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Stream is the Schema for the Streams API. ""page_title: "flexibleengine_dis_stream"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Stream struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StreamSpec   `json:"spec"`
	Status            StreamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StreamList contains a list of Streams
type StreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Stream `json:"items"`
}

// Repository type metadata.
var (
	Stream_Kind             = "Stream"
	Stream_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Stream_Kind}.String()
	Stream_KindAPIVersion   = Stream_Kind + "." + CRDGroupVersion.String()
	Stream_GroupVersionKind = CRDGroupVersion.WithKind(Stream_Kind)
)

func init() {
	SchemeBuilder.Register(&Stream{}, &StreamList{})
}
