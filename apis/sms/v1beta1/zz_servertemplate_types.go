/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServerTemplateObservation struct {

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the VPC which the target server belongs to.
	VPCName *string `json:"vpcName,omitempty" tf:"vpc_name,omitempty"`
}

type ServerTemplateParameters struct {

	// Specifies the availability zone where the target server is located.
	// +kubebuilder:validation:Required
	AvailabilityZone *string `json:"availabilityZone" tf:"availability_zone,omitempty"`

	// Specifies the bandwidth size in Mbit/s about the public IP address
	// that will be used for migration.
	// +kubebuilder:validation:Optional
	BandwidthSize *float64 `json:"bandwidthSize,omitempty" tf:"bandwidth_size,omitempty"`

	// Specifies the flavor ID for the target server.
	// +kubebuilder:validation:Optional
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Specifies the server template name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the project ID where the target server is located.
	// If omitted, the default project in the region will be used.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the region where the target server is located.
	// If omitted, the provider-level region will be used.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIDRefs []v1.Reference `json:"securityGroupIdRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIDSelector *v1.Selector `json:"securityGroupIdSelector,omitempty" tf:"-"`

	// Specifies an array of one or more security group IDs to associate with
	// the target server. If omitted or set to ["autoCreate"], a new security group will be created automatically during migration.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=SecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=SecurityGroupIDSelector
	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to VPCSubnet in vpc to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIDRefs []v1.Reference `json:"subnetIdRefs,omitempty" tf:"-"`

	// Selector for a list of VPCSubnet in vpc to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// Specifies an array of one or more VPC subnet IDs to attach to the target server.
	// If omitted or set to ["autoCreate"], a new subnet will be created automatically during migration.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1.VPCSubnet
	// +crossplane:generate:reference:extractor=github.com/FrangipaneTeam/provider-flexibleengine/pkg/tools.ExtractorParamPathfunc(true, "id")
	// +crossplane:generate:reference:refFieldName=SubnetIDRefs
	// +crossplane:generate:reference:selectorFieldName=SubnetIDSelector
	// +kubebuilder:validation:Optional
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// Specifies the name of the target server. Defaults to the template name.
	// +kubebuilder:validation:Optional
	TargetServerName *string `json:"targetServerName,omitempty" tf:"target_server_name,omitempty"`

	// Specifies the ID of the VPC which the target server belongs to.
	// If omitted or set to "autoCreate", a new VPC will be created automatically during migration.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`

	// Specifies the disk type of the target server. Available values are: SAS, SSD,
	// GPSSD and ESSD, defaults to SAS.
	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

// ServerTemplateSpec defines the desired state of ServerTemplate
type ServerTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerTemplateParameters `json:"forProvider"`
}

// ServerTemplateStatus defines the observed state of ServerTemplate.
type ServerTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServerTemplate is the Schema for the ServerTemplates API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type ServerTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerTemplateSpec   `json:"spec"`
	Status            ServerTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerTemplateList contains a list of ServerTemplates
type ServerTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerTemplate `json:"items"`
}

// Repository type metadata.
var (
	ServerTemplate_Kind             = "ServerTemplate"
	ServerTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerTemplate_Kind}.String()
	ServerTemplate_KindAPIVersion   = ServerTemplate_Kind + "." + CRDGroupVersion.String()
	ServerTemplate_GroupVersionKind = CRDGroupVersion.WithKind(ServerTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerTemplate{}, &ServerTemplateList{})
}
