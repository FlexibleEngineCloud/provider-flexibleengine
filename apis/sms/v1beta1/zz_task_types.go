/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PhysicalVolumesObservation struct {
}

type PhysicalVolumesParameters struct {

	// Specifies the disk type. The value can be NORMAL and BOOT.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Required
	DeviceType *string `json:"deviceType" tf:"device_type,omitempty"`

	// Specifies the file system type, e.g. "ext4".
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Required
	FileSystem *string `json:"fileSystem" tf:"file_system,omitempty"`

	// Specifies the serial number of the volume.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Required
	Index *float64 `json:"index" tf:"index,omitempty"`

	// Specifies the mount point, e.g. "/".
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Required
	MountPoint *string `json:"mountPoint" tf:"mount_point,omitempty"`

	// Specifies the disk name, e.g. "/dev/sda".
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the volume size in MB. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Required
	Size *float64 `json:"size" tf:"size,omitempty"`

	// Specifies the GUID of the volume.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// Specifies the used space in MB. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	UsedSize *float64 `json:"usedSize,omitempty" tf:"used_size,omitempty"`
}

type TargetServerDisksObservation struct {
}

type TargetServerDisksParameters struct {

	// Specifies the disk type. The value can be NORMAL and BOOT.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Required
	DeviceType *string `json:"deviceType" tf:"device_type,omitempty"`

	// Specifies the disk index, e.g. "0".
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DiskID *string `json:"diskId,omitempty" tf:"disk_id,omitempty"`

	// Specifies the disk name, e.g. "/dev/sda".
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies an array of physical volume informations.
	// The object is documented below. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	PhysicalVolumes []PhysicalVolumesParameters `json:"physicalVolumes,omitempty" tf:"physical_volumes,omitempty"`

	// Specifies the volume size in MB. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Required
	Size *float64 `json:"size" tf:"size,omitempty"`

	// Specifies the used space in MB. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	UsedSize *float64 `json:"usedSize,omitempty" tf:"used_size,omitempty"`
}

type TaskObservation struct {

	// The enterprise project id of the target server.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The migration rate, in MB/s.
	MigrateSpeed *float64 `json:"migrateSpeed,omitempty" tf:"migrate_speed,omitempty"`

	// The status of the migration task.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The name of the target server.
	TargetServerName *string `json:"targetServerName,omitempty" tf:"target_server_name,omitempty"`
}

type TaskParameters struct {

	// Specifies the operation after the task is created.
	// The value can be start, stop and restart.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Specifies the IP address of the target server.
	// Use the EIP of the target server if the migration network type is Internet.
	// Use the private IP address of the target server if the migration network type is Direct Connect or VPN.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	MigrationIP *string `json:"migrationIp,omitempty" tf:"migration_ip,omitempty"`

	// Specifies the OS type of the source server. The value can be WINDOWS and LINUX.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Required
	OsType *string `json:"osType" tf:"os_type,omitempty"`

	// Specifies the project ID where the target server is located.
	// If omitted, the default project in the region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the region where the target server is located.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the ID of the source server.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Required
	SourceServerID *string `json:"sourceServerId" tf:"source_server_id,omitempty"`

	// Specifies whether to start the target server after the migration.
	// The default value is true. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	StartTargetServer *bool `json:"startTargetServer,omitempty" tf:"start_target_server,omitempty"`

	// - Specifies whether to perform a continuous synchronization after the first replication.
	// The default value is false. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Syncing *bool `json:"syncing,omitempty" tf:"syncing,omitempty"`

	// Specifies the disk configurations of the target server.
	// If omitted, it will be obtained from the source server. The object
	// is documented below. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	TargetServerDisks []TargetServerDisksParameters `json:"targetServerDisks,omitempty" tf:"target_server_disks,omitempty"`

	// Specifies the existing server ID as the target server.
	// This parameter and vm_template_id are alternative. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	TargetServerID *string `json:"targetServerId,omitempty" tf:"target_server_id,omitempty"`

	// Specifies the type of the migration task. Available values are
	// MIGRATE_FILE(file-level migration) and MIGRATE_BLOCK(block-level migration).
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// Specifies whether to use a public IP address for migration.
	// The default value is true. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	UsePublicIP *bool `json:"usePublicIp,omitempty" tf:"use_public_ip,omitempty"`

	// Specifies the template used to create the target server automatically.
	// This parameter and target_server_id are alternative. Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=ServerTemplate
	// +kubebuilder:validation:Optional
	VMTemplateID *string `json:"vmTemplateId,omitempty" tf:"vm_template_id,omitempty"`

	// Reference to a ServerTemplate to populate vmTemplateId.
	// +kubebuilder:validation:Optional
	VMTemplateIDRef *v1.Reference `json:"vmTemplateIdRef,omitempty" tf:"-"`

	// Selector for a ServerTemplate to populate vmTemplateId.
	// +kubebuilder:validation:Optional
	VMTemplateIDSelector *v1.Selector `json:"vmTemplateIdSelector,omitempty" tf:"-"`
}

// TaskSpec defines the desired state of Task
type TaskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TaskParameters `json:"forProvider"`
}

// TaskStatus defines the observed state of Task.
type TaskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TaskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Task is the Schema for the Tasks API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Task struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TaskSpec   `json:"spec"`
	Status            TaskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TaskList contains a list of Tasks
type TaskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Task `json:"items"`
}

// Repository type metadata.
var (
	Task_Kind             = "Task"
	Task_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Task_Kind}.String()
	Task_KindAPIVersion   = Task_Kind + "." + CRDGroupVersion.String()
	Task_GroupVersionKind = CRDGroupVersion.WithKind(Task_Kind)
)

func init() {
	SchemeBuilder.Register(&Task{}, &TaskList{})
}
