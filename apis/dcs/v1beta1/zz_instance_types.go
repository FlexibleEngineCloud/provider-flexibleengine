/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceObservation struct {

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Cache node's IP address in tenant's VPC.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Internal DCS version.
	InternalVersion *string `json:"internalVersion,omitempty" tf:"internal_version,omitempty"`

	// Overall memory size. Unit: MB.
	MaxMemory *float64 `json:"maxMemory,omitempty" tf:"max_memory,omitempty"`

	// Resource specifications.
	// dcs.single_node: indicates a DCS instance in single-node mode.
	// dcs.master_standby: indicates a DCS instance in master/standby mode.
	// dcs.cluster: indicates a DCS instance in cluster mode.
	ResourceSpecCode *string `json:"resourceSpecCode,omitempty" tf:"resource_spec_code,omitempty"`

	// Indicates the name of a security group.
	SecurityGroupName *string `json:"securityGroupName,omitempty" tf:"security_group_name,omitempty"`

	// Status of the Cache instance.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Indicates the name of a subnet.
	SubnetName *string `json:"subnetName,omitempty" tf:"subnet_name,omitempty"`

	// Size of the used memory. Unit: MB.
	UsedMemory *float64 `json:"usedMemory,omitempty" tf:"used_memory,omitempty"`

	// Indicates the name of a vpc.
	VPCName *string `json:"vpcName,omitempty" tf:"vpc_name,omitempty"`
}

type InstanceParameters struct {

	// Username used for accessing a DCS instance after password
	// authentication. A username starts with a letter, consists of 1 to 64 characters,
	// and supports only letters, digits, and hyphens (-).
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	AccessUser *string `json:"accessUser,omitempty" tf:"access_user,omitempty"`

	// IDs or Names of the AZs where cache nodes reside. For details
	// on how to query AZs, see Querying AZ Information.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Required
	AvailableZones []*string `json:"availableZones" tf:"available_zones,omitempty"`

	// Day in a week on which backup starts. Range: 1–7. Where: 1
	// indicates Monday; 7 indicates Sunday. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	BackupAt []*float64 `json:"backupAt,omitempty" tf:"backup_at,omitempty"`

	// Backup type. Options:
	// auto: automatic backup.
	// manual: manual backup.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	BackupType *string `json:"backupType,omitempty" tf:"backup_type,omitempty"`

	// Time at which backup starts. "00:00-01:00" indicates that backup
	// starts at 00:00:00. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	BeginAt *string `json:"beginAt,omitempty" tf:"begin_at,omitempty"`

	// Indicates the Cache capacity. Unit: GB.
	// For a DCS Redis or Memcached instance in single-node or master/standby mode, the cache
	// capacity can be 2 GB, 4 GB, 8 GB, 16 GB, 32 GB, or 64 GB.
	// For a DCS Redis instance in cluster mode, the cache capacity can be 64, 128, 256, 512,
	// or 1024 GB. Changing this creates a new instance.
	// +kubebuilder:validation:Required
	Capacity *float64 `json:"capacity" tf:"capacity,omitempty"`

	// Indicates the description of an instance. It is a character
	// string containing not more than 1024 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Indicates a cache engine. Valid values are Redis and Memcached.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Required
	Engine *string `json:"engine" tf:"engine,omitempty"`

	// Indicates the version of a cache engine.
	// This parameter is only supported and mandatory for Redis engine.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Indicates the time at which a maintenance time window starts.
	// Format: HH:mm:ss.
	// The start time and end time of a maintenance time window must indicate the time segment of
	// a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
	// The start time must be set to 22:00, 02:00, 06:00, 10:00, 14:00, or 18:00.
	// Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_begin
	// is left blank, parameter maintain_end is also blank. In this case, the system automatically
	// allocates the default start time 02:00.
	// +kubebuilder:validation:Optional
	MaintainBegin *string `json:"maintainBegin,omitempty" tf:"maintain_begin,omitempty"`

	// Indicates the time at which a maintenance time window ends.
	// Format: HH:mm:ss.
	// The start time and end time of a maintenance time window must indicate the time segment of
	// a supported maintenance time window. For details, see section Querying Maintenance Time Windows.
	// The end time is four hours later than the start time. For example, if the start time is 22:00,
	// the end time is 02:00.
	// Parameters maintain_begin and maintain_end must be set in pairs. If parameter maintain_end is left
	// blank, parameter maintain_begin is also blank. In this case, the system automatically allocates
	// the default end time 06:00.
	// +kubebuilder:validation:Optional
	MaintainEnd *string `json:"maintainEnd,omitempty" tf:"maintain_end,omitempty"`

	// Indicates the name of an instance. An instance name starts with a letter,
	// consists of 4 to 64 characters, and supports only letters, digits, and hyphens (-).
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the network id of the subnet. Changing this creates a new instance.
	// +crossplane:generate:reference:type=github.com/gaetanars/provider-flexibleengine/apis/vpc/v1beta1.Network
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// Password of a DCS instance.
	// The password of a DCS Redis instance must meet the following complexity requirements:
	// Changing this creates a new instance.
	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Interval at which backup is performed. Currently, only weekly
	// backup is supported. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	PeriodType *string `json:"periodType,omitempty" tf:"period_type,omitempty"`

	// Port customization, which is supported only by Redis 4.0 and Redis 5.0 instances and not by
	// Redis 3.0 and Memcached instances. The values ranges from 1 to 65535. The default value is 6379.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Product ID used to differentiate DCS instance types.
	// +kubebuilder:validation:Optional
	ProductID *string `json:"productId,omitempty" tf:"product_id,omitempty"`

	// Retention time. Unit: day. Range: 1–7.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	SaveDays *float64 `json:"saveDays,omitempty" tf:"save_days,omitempty"`

	// Specifies the id of the security group which the instance belongs to.
	// This parameter is only supported and mandatory for Memcached and Redis 3.0 versions.
	// +crossplane:generate:reference:type=github.com/gaetanars/provider-flexibleengine/apis/vpc/v1beta1.SecGroup
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Reference to a SecGroup in vpc to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDRef *v1.Reference `json:"securityGroupIdRef,omitempty" tf:"-"`

	// Selector for a SecGroup in vpc to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDSelector *v1.Selector `json:"securityGroupIdSelector,omitempty" tf:"-"`

	// Specifies the id of the VPC. Changing this creates a new instance.
	// +crossplane:generate:reference:type=github.com/gaetanars/provider-flexibleengine/apis/vpc/v1beta1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Instance is the Schema for the Instances API. ""page_title: "flexibleengine_dcs_instance_v1"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceSpec   `json:"spec"`
	Status            InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
