/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigCenterAddressesObservation struct {

	// The internal access address.
	Private *string `json:"private,omitempty" tf:"private,omitempty"`

	// The public access address. This address is only set when EIP is bound.
	Public *string `json:"public,omitempty" tf:"public,omitempty"`
}

type ConfigCenterAddressesParameters struct {
}

type MicroserviceEngineObservation struct {

	// The address of config center.
	// The object structure is documented below.
	ConfigCenterAddresses []ConfigCenterAddressesObservation `json:"configCenterAddresses,omitempty" tf:"config_center_addresses,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The maximum number of the microservice instance resources.
	InstanceLimit *float64 `json:"instanceLimit,omitempty" tf:"instance_limit,omitempty"`

	// The maximum number of the microservice resources.
	ServiceLimit *float64 `json:"serviceLimit,omitempty" tf:"service_limit,omitempty"`

	// The connection address of service center.
	// The object structure is documented below.
	ServiceRegistryAddresses []ServiceRegistryAddressesObservation `json:"serviceRegistryAddresses,omitempty" tf:"service_registry_addresses,omitempty"`
}

type MicroserviceEngineParameters struct {

	// Specifies the account password. The corresponding account name is root.
	// Required if auth_type is RBAC. Changing this will create a new engine.
	// The password format must meet the following conditions:
	// +kubebuilder:validation:Optional
	AdminPassSecretRef *v1.SecretKeySelector `json:"adminPassSecretRef,omitempty" tf:"-"`

	// Specifies the authentication method for the dedicated microservice engine.
	// Changing this will create a new engine.
	// +kubebuilder:validation:Required
	AuthType *string `json:"authType" tf:"auth_type,omitempty"`

	// Specifies the list of availability zone.
	// Changing this will create a new engine.
	// +kubebuilder:validation:Required
	AvailabilityZones []*string `json:"availabilityZones" tf:"availability_zones,omitempty"`

	// Specifies the description of the dedicated microservice engine.
	// The description can contian a maximum of 255 characters.
	// Changing this will create a new engine.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the EIP ID to which the dedicated microservice engine assocated.
	// Changing this will create a new engine.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/eip/v1beta1.EIP
	// +kubebuilder:validation:Optional
	EIPID *string `json:"eipId,omitempty" tf:"eip_id,omitempty"`

	// Reference to a EIP in eip to populate eipId.
	// +kubebuilder:validation:Optional
	EIPIDRef *v1.Reference `json:"eipIdRef,omitempty" tf:"-"`

	// Selector for a EIP in eip to populate eipId.
	// +kubebuilder:validation:Optional
	EIPIDSelector *v1.Selector `json:"eipIdSelector,omitempty" tf:"-"`

	// The resource ID in UUID format.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the additional parameters for the dedicated microservice engine.
	// Changing this will create a new engine.
	// +kubebuilder:validation:Optional
	ExtendParams map[string]*string `json:"extendParams,omitempty" tf:"extend_params,omitempty"`

	// Specifies the flavor of the dedicated microservice engine.
	// Changing this will create a new engine.
	// +kubebuilder:validation:Required
	Flavor *string `json:"flavor" tf:"flavor,omitempty"`

	// Specifies the name of the dedicated microservice engine.
	// The name can contain 3 to 24 characters, only letters, digits and hyphens (-) are allowed.
	// The name must start with a letter and cannot end with a hyphen (-).
	// Changing this will create a new engine.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the ID of VPC the subnet to which the dedicated microservice
	// engine belongs. Changing this will create a new engine.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1.VPCSubnet
	// +crossplane:generate:reference:extractor=github.com/FrangipaneTeam/provider-flexibleengine/pkg/tools.ExtractorParamPathfunc(true, "id")
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a VPCSubnet in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a VPCSubnet in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the dedicated microservice engine.
	// If omitted, the provider-level region will be used. Changing this will create a new engine.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the version of the dedicated microservice engine. The value can be:
	// CSE. Defaults to: CSE. Changing this will create a new engine.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ServiceRegistryAddressesObservation struct {

	// The internal access address.
	Private *string `json:"private,omitempty" tf:"private,omitempty"`

	// The public access address. This address is only set when EIP is bound.
	Public *string `json:"public,omitempty" tf:"public,omitempty"`
}

type ServiceRegistryAddressesParameters struct {
}

// MicroserviceEngineSpec defines the desired state of MicroserviceEngine
type MicroserviceEngineSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MicroserviceEngineParameters `json:"forProvider"`
}

// MicroserviceEngineStatus defines the observed state of MicroserviceEngine.
type MicroserviceEngineStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MicroserviceEngineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MicroserviceEngine is the Schema for the MicroserviceEngines API. ""page_title: "flexibleengine_cse_microservice_engine"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type MicroserviceEngine struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MicroserviceEngineSpec   `json:"spec"`
	Status            MicroserviceEngineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MicroserviceEngineList contains a list of MicroserviceEngines
type MicroserviceEngineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MicroserviceEngine `json:"items"`
}

// Repository type metadata.
var (
	MicroserviceEngine_Kind             = "MicroserviceEngine"
	MicroserviceEngine_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MicroserviceEngine_Kind}.String()
	MicroserviceEngine_KindAPIVersion   = MicroserviceEngine_Kind + "." + CRDGroupVersion.String()
	MicroserviceEngine_GroupVersionKind = CRDGroupVersion.WithKind(MicroserviceEngine_Kind)
)

func init() {
	SchemeBuilder.Register(&MicroserviceEngine{}, &MicroserviceEngineList{})
}
