/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	v1beta1 "github.com/FrangipaneTeam/provider-flexibleengine/apis/eip/v1beta1"
	v1beta11 "github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1"
	common "github.com/FrangipaneTeam/provider-flexibleengine/config/common"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Microservice.
func (mg *Microservice) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectAddress),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ConnectAddressRef,
		Selector:     mg.Spec.ForProvider.ConnectAddressSelector,
		To: reference.To{
			List:    &MicroserviceEngineList{},
			Managed: &MicroserviceEngine{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectAddress")
	}
	mg.Spec.ForProvider.ConnectAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectAddressRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MicroserviceEngine.
func (mg *MicroserviceEngine) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EIPID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EIPIDRef,
		Selector:     mg.Spec.ForProvider.EIPIDSelector,
		To: reference.To{
			List:    &v1beta1.EIPList{},
			Managed: &v1beta1.EIP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EIPID")
	}
	mg.Spec.ForProvider.EIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkID),
		Extract:      common.IDExtractor(),
		Reference:    mg.Spec.ForProvider.NetworkIDRef,
		Selector:     mg.Spec.ForProvider.NetworkIDSelector,
		To: reference.To{
			List:    &v1beta11.VPCSubnetList{},
			Managed: &v1beta11.VPCSubnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkID")
	}
	mg.Spec.ForProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MicroserviceInstance.
func (mg *MicroserviceInstance) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectAddress),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ConnectAddressRef,
		Selector:     mg.Spec.ForProvider.ConnectAddressSelector,
		To: reference.To{
			List:    &MicroserviceEngineList{},
			Managed: &MicroserviceEngine{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectAddress")
	}
	mg.Spec.ForProvider.ConnectAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectAddressRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MicroserviceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.MicroserviceIDRef,
		Selector:     mg.Spec.ForProvider.MicroserviceIDSelector,
		To: reference.To{
			List:    &MicroserviceList{},
			Managed: &Microservice{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MicroserviceID")
	}
	mg.Spec.ForProvider.MicroserviceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MicroserviceIDRef = rsp.ResolvedReference

	return nil
}
