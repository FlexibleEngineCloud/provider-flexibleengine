/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MicroserviceObservation struct {

	// The microservice ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The microservice status. The values supports UP and DOWN.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type MicroserviceParameters struct {

	// Specifies the account password.
	// Required if the auth_type of engine is RBAC. Changing this will create a new microservice.
	// The password format must meet the following conditions:
	// +kubebuilder:validation:Optional
	AdminPassSecretRef *v1.SecretKeySelector `json:"adminPassSecretRef,omitempty" tf:"-"`

	// Specifies the account name. The initial account name is root.
	// Required if the auth_type of engine is RBAC. Changing this will create a new microservice.
	// +kubebuilder:validation:Optional
	AdminUser *string `json:"adminUser,omitempty" tf:"admin_user,omitempty"`

	// Specifies the name of the dedicated microservice application.
	// Changing this will create a new microservice.
	// +kubebuilder:validation:Required
	AppName *string `json:"appName" tf:"app_name,omitempty"`

	// Specifies the connection address of service registry center for the
	// specified dedicated CSE engine. Changing this will create a new microservice.
	// +crossplane:generate:reference:type=MicroserviceEngine
	// +kubebuilder:validation:Optional
	ConnectAddress *string `json:"connectAddress,omitempty" tf:"connect_address,omitempty"`

	// Reference to a MicroserviceEngine to populate connectAddress.
	// +kubebuilder:validation:Optional
	ConnectAddressRef *v1.Reference `json:"connectAddressRef,omitempty" tf:"-"`

	// Selector for a MicroserviceEngine to populate connectAddress.
	// +kubebuilder:validation:Optional
	ConnectAddressSelector *v1.Selector `json:"connectAddressSelector,omitempty" tf:"-"`

	// Specifies the description of the dedicated microservice.
	// The description can contian a maximum of 256 characters.
	// Changing this will create a new microservice.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the environment (stage) type.
	// The valid values are development, testing, acceptance and production.
	// If omitted, the microservice will be deployed in an empty environment.
	// Changing this will create a new microservice.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// Specifies the microservice level.
	// The valid values are FRONT, MIDDLE, and BACK. Changing this will create a new microservice.
	// +kubebuilder:validation:Optional
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// Specifies the name of the dedicated microservice.
	// The name can contain 1 to 128 characters, only letters, digits, underscore (_), hyphens (-) and dots (.) are
	// allowed. The name must start and end with a letter or digit. Changing this will create a new microservice.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the version of the dedicated microservice.
	// Changing this will create a new microservice.
	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`
}

// MicroserviceSpec defines the desired state of Microservice
type MicroserviceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MicroserviceParameters `json:"forProvider"`
}

// MicroserviceStatus defines the observed state of Microservice.
type MicroserviceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MicroserviceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Microservice is the Schema for the Microservices API. ""page_title: "flexibleengine_cse_microservice"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Microservice struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MicroserviceSpec   `json:"spec"`
	Status            MicroserviceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MicroserviceList contains a list of Microservices
type MicroserviceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Microservice `json:"items"`
}

// Repository type metadata.
var (
	Microservice_Kind             = "Microservice"
	Microservice_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Microservice_Kind}.String()
	Microservice_KindAPIVersion   = Microservice_Kind + "." + CRDGroupVersion.String()
	Microservice_GroupVersionKind = CRDGroupVersion.WithKind(Microservice_Kind)
)

func init() {
	SchemeBuilder.Register(&Microservice{}, &MicroserviceList{})
}
