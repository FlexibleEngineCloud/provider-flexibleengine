/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataCenterObservation struct {
}

type DataCenterParameters struct {

	// Specifies the custom availability zone name of the data center.
	// Changing this will create a new microservice instance.
	// +kubebuilder:validation:Required
	AvailabilityZone *string `json:"availabilityZone" tf:"availability_zone,omitempty"`

	// Specifies the data center name.
	// Changing this will create a new microservice instance.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the custom region name of the data center.
	// Changing this will create a new microservice instance.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`
}

type HealthCheckObservation struct {
}

type HealthCheckParameters struct {

	// Specifies the heartbeat interval. The unit is s (second).
	// Changing this will create a new microservice instance.
	// +kubebuilder:validation:Required
	Interval *float64 `json:"interval" tf:"interval,omitempty"`

	// Specifies the maximum retries.
	// Changing this will create a new microservice instance.
	// +kubebuilder:validation:Required
	MaxRetries *float64 `json:"maxRetries" tf:"max_retries,omitempty"`

	// Specifies the heartbeat mode. The valid values are push and pull.
	// Changing this will create a new microservice instance.
	// +kubebuilder:validation:Required
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// Specifies the port number.
	// Changing this will create a new microservice instance.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type MicroserviceInstanceObservation struct {

	// The microservice instance ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The microservice instance status. The values supports UP, DOWN, STARTING and OUTOFSERVICE.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type MicroserviceInstanceParameters struct {

	// Specifies the account password.
	// Required if the auth_type of engine is RBAC. Changing this will create a new microservice instance.
	// The password format must meet the following conditions:
	// +kubebuilder:validation:Optional
	AdminPassSecretRef *v1.SecretKeySelector `json:"adminPassSecretRef,omitempty" tf:"-"`

	// Specifies the account name. The initial account name is root.
	// Required if the auth_type of engine is RBAC. Changing this will create a new microservice instance.
	// +kubebuilder:validation:Optional
	AdminUser *string `json:"adminUser,omitempty" tf:"admin_user,omitempty"`

	// Specifies the connection address of service registry center for the
	// specified dedicated CSE engine. Changing this will create a new microservice instance.
	// +crossplane:generate:reference:type=MicroserviceEngine
	// +kubebuilder:validation:Optional
	ConnectAddress *string `json:"connectAddress,omitempty" tf:"connect_address,omitempty"`

	// Reference to a MicroserviceEngine to populate connectAddress.
	// +kubebuilder:validation:Optional
	ConnectAddressRef *v1.Reference `json:"connectAddressRef,omitempty" tf:"-"`

	// Selector for a MicroserviceEngine to populate connectAddress.
	// +kubebuilder:validation:Optional
	ConnectAddressSelector *v1.Selector `json:"connectAddressSelector,omitempty" tf:"-"`

	// Specifies the data center configuration.
	// The object structure is documented below.
	// Changing this will create a new microservice instance.
	// +kubebuilder:validation:Optional
	DataCenter []DataCenterParameters `json:"dataCenter,omitempty" tf:"data_center,omitempty"`

	// Specifies the access addresses information.
	// Changing this will create a new microservice instance.
	// +kubebuilder:validation:Required
	Endpoints []*string `json:"endpoints" tf:"endpoints,omitempty"`

	// Specifies the health check configuration.
	// The object structure is documented below.
	// Changing this will create a new microservice instance.
	// +kubebuilder:validation:Optional
	HealthCheck []HealthCheckParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// Specifies the host name, such as localhost.
	// Changing this will create a new microservice instance.
	// +kubebuilder:validation:Required
	HostName *string `json:"hostName" tf:"host_name,omitempty"`

	// Specifies the ID of the dedicated microservice to which the instance
	// belongs. Changing this will create a new microservice instance.
	// +crossplane:generate:reference:type=Microservice
	// +kubebuilder:validation:Optional
	MicroserviceID *string `json:"microserviceId,omitempty" tf:"microservice_id,omitempty"`

	// Reference to a Microservice to populate microserviceId.
	// +kubebuilder:validation:Optional
	MicroserviceIDRef *v1.Reference `json:"microserviceIdRef,omitempty" tf:"-"`

	// Selector for a Microservice to populate microserviceId.
	// +kubebuilder:validation:Optional
	MicroserviceIDSelector *v1.Selector `json:"microserviceIdSelector,omitempty" tf:"-"`

	// Specifies the extended attributes.
	// Changing this will create a new microservice instance.
	// +kubebuilder:validation:Optional
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// Specifies the verison of the dedicated microservice instance.
	// Changing this will create a new microservice instance.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// MicroserviceInstanceSpec defines the desired state of MicroserviceInstance
type MicroserviceInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MicroserviceInstanceParameters `json:"forProvider"`
}

// MicroserviceInstanceStatus defines the observed state of MicroserviceInstance.
type MicroserviceInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MicroserviceInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MicroserviceInstance is the Schema for the MicroserviceInstances API. ""page_title: "flexibleengine_cse_microservice_instance"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type MicroserviceInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MicroserviceInstanceSpec   `json:"spec"`
	Status            MicroserviceInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MicroserviceInstanceList contains a list of MicroserviceInstances
type MicroserviceInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MicroserviceInstance `json:"items"`
}

// Repository type metadata.
var (
	MicroserviceInstance_Kind             = "MicroserviceInstance"
	MicroserviceInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MicroserviceInstance_Kind}.String()
	MicroserviceInstance_KindAPIVersion   = MicroserviceInstance_Kind + "." + CRDGroupVersion.String()
	MicroserviceInstance_GroupVersionKind = CRDGroupVersion.WithKind(MicroserviceInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&MicroserviceInstance{}, &MicroserviceInstanceList{})
}
