/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TurboObservation struct {

	// The available capacity of the SFS Turbo file system in the unit of GB.
	AvailableCapacity *string `json:"availableCapacity,omitempty" tf:"available_capacity,omitempty"`

	// Tthe mount point of the SFS Turbo file system.
	ExportLocation *string `json:"exportLocation,omitempty" tf:"export_location,omitempty"`

	// The UUID of the SFS Turbo file system.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The status of the SFS Turbo file system.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The version ID of the SFS Turbo file system.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type TurboParameters struct {

	// Specifies the availability zone where the file system is located.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Required
	AvailabilityZone *string `json:"availabilityZone" tf:"availability_zone,omitempty"`

	// Specifies the ID of a KMS key to encrypt the file system.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	CryptKeyID *string `json:"cryptKeyId,omitempty" tf:"crypt_key_id,omitempty"`

	// Specifies the name of an SFS Turbo file system. The value contains 4 to 64
	// characters and must start with a letter. Changing this will create a new resource.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The region of the SFS Turbo file system.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the security group ID. Changing this will create a new resource.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1.SecGroup
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Reference to a SecGroup in vpc to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDRef *v1.Reference `json:"securityGroupIdRef,omitempty" tf:"-"`

	// Selector for a SecGroup in vpc to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDSelector *v1.Selector `json:"securityGroupIdSelector,omitempty" tf:"-"`

	// Specifies the protocol for sharing file systems. The valid value is NFS.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	ShareProto *string `json:"shareProto,omitempty" tf:"share_proto,omitempty"`

	// Specifies the file system type. The valid values are STANDARD and PERFORMANCE.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	ShareType *string `json:"shareType,omitempty" tf:"share_type,omitempty"`

	// Specifies the capacity of a common file system, in GB. The value ranges from 500 to 32768.
	// +kubebuilder:validation:Required
	Size *float64 `json:"size" tf:"size,omitempty"`

	// Specifies the network ID of the subnet. Changing this will create a new resource.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1.VPCSubnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a VPCSubnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a VPCSubnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// Specifies the VPC ID. Changing this will create a new resource.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// TurboSpec defines the desired state of Turbo
type TurboSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TurboParameters `json:"forProvider"`
}

// TurboStatus defines the observed state of Turbo.
type TurboStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TurboObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Turbo is the Schema for the Turbos API. ""page_title: "flexibleengine_sfs_turbo"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Turbo struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TurboSpec   `json:"spec"`
	Status            TurboStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TurboList contains a list of Turbos
type TurboList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Turbo `json:"items"`
}

// Repository type metadata.
var (
	Turbo_Kind             = "Turbo"
	Turbo_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Turbo_Kind}.String()
	Turbo_KindAPIVersion   = Turbo_Kind + "." + CRDGroupVersion.String()
	Turbo_GroupVersionKind = CRDGroupVersion.WithKind(Turbo_Kind)
)

func init() {
	SchemeBuilder.Register(&Turbo{}, &TurboList{})
}
