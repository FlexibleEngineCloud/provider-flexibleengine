/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessRulesObservation struct {

	// Specifies the access level of the shared file system. Possible values are ro (read-only)
	// and rw (read-write). The default value is rw (read/write). Changing this will create a new access rule.
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// The UUID of the share access rule.
	AccessRuleID *string `json:"accessRuleId,omitempty" tf:"access_rule_id,omitempty"`

	// Specifies the value that defines the access rule. The value contains 1 to 255 characters.
	// Changing this will create a new access rule. The value varies according to the scenario:
	AccessTo *string `json:"accessTo,omitempty" tf:"access_to,omitempty"`

	// Specifies the type of the share access rule. The default value is cert.
	// Changing this will create a new access rule.
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// The status of the shared file system.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type AccessRulesParameters struct {
}

type FileSystemObservation struct {

	// The status of the shared file system.
	AccessRuleStatus *string `json:"accessRuleStatus,omitempty" tf:"access_rule_status,omitempty"`

	// All access rules of the shared file system. The object includes the following:
	AccessRules []AccessRulesObservation `json:"accessRules,omitempty" tf:"access_rules,omitempty"`

	// The address for accessing the shared file system.
	ExportLocation *string `json:"exportLocation,omitempty" tf:"export_location,omitempty"`

	// The UUID of the shared file system.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The UUID of the share access rule.
	ShareAccessID *string `json:"shareAccessId,omitempty" tf:"share_access_id,omitempty"`

	// The status of the shared file system.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The volume type.
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type FileSystemParameters struct {

	// Specifies the access level of the shared file system. Possible values are ro (read-only)
	// and rw (read-write). The default value is rw (read/write). Changing this will create a new access rule.
	// +kubebuilder:validation:Optional
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// Specifies the value that defines the access rule. The value contains 1 to 255 characters.
	// Changing this will create a new access rule. The value varies according to the scenario:
	// +kubebuilder:validation:Optional
	AccessTo *string `json:"accessTo,omitempty" tf:"access_to,omitempty"`

	// Specifies the type of the share access rule. The default value is cert.
	// Changing this will create a new access rule.
	// +kubebuilder:validation:Optional
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// The availability zone name. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Describes the shared file system.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The level of visibility for the shared file system.
	// +kubebuilder:validation:Optional
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// Metadata key and value pairs as a dictionary of strings.
	// The supported metadata keys are "#sfs_crypt_key_id", "#sfs_crypt_domain_id" and "#sfs_crypt_alias",
	// and the keys should be exist at the same time to enable the data encryption function.
	// Changing this will create a new resource.
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The name of the shared file system.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The protocol for sharing file systems. The default value is NFS.
	// +kubebuilder:validation:Optional
	ShareProto *string `json:"shareProto,omitempty" tf:"share_proto,omitempty"`

	// The size (GB) of the shared file system.
	// +kubebuilder:validation:Required
	Size *float64 `json:"size" tf:"size,omitempty"`
}

// FileSystemSpec defines the desired state of FileSystem
type FileSystemSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FileSystemParameters `json:"forProvider"`
}

// FileSystemStatus defines the observed state of FileSystem.
type FileSystemStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FileSystemObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FileSystem is the Schema for the FileSystems API. ""page_title: "flexibleengine_sfs_file_system_v2"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type FileSystem struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FileSystemSpec   `json:"spec"`
	Status            FileSystemStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FileSystemList contains a list of FileSystems
type FileSystemList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FileSystem `json:"items"`
}

// Repository type metadata.
var (
	FileSystem_Kind             = "FileSystem"
	FileSystem_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FileSystem_Kind}.String()
	FileSystem_KindAPIVersion   = FileSystem_Kind + "." + CRDGroupVersion.String()
	FileSystem_GroupVersionKind = CRDGroupVersion.WithKind(FileSystem_Kind)
)

func init() {
	SchemeBuilder.Register(&FileSystem{}, &FileSystemList{})
}
