/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessRuleObservation struct {

	// The UUID of the share access rule.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The status of the share access rule.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type AccessRuleParameters struct {

	// Specifies the access level of the shared file system. Possible values are ro (read-only)
	// and rw (read-write). The default value is rw (read/write). Changing this will create a new access rule.
	// +kubebuilder:validation:Optional
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// Specifies the value that defines the access rule. The value contains 1 to 255 characters.
	// Changing this will create a new access rule. The value varies according to the scenario:
	// +kubebuilder:validation:Required
	AccessTo *string `json:"accessTo" tf:"access_to,omitempty"`

	// Specifies the type of the share access rule. The default value is cert.
	// Changing this will create a new access rule.
	// +kubebuilder:validation:Optional
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// Specifies the UUID of the shared file system. Changing this will create a new access rule.
	// +kubebuilder:validation:Required
	SfsID *string `json:"sfsId" tf:"sfs_id,omitempty"`
}

// AccessRuleSpec defines the desired state of AccessRule
type AccessRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccessRuleParameters `json:"forProvider"`
}

// AccessRuleStatus defines the observed state of AccessRule.
type AccessRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccessRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccessRule is the Schema for the AccessRules API. ""page_title: "flexibleengine_sfs_access_rule_v2"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type AccessRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessRuleSpec   `json:"spec"`
	Status            AccessRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessRuleList contains a list of AccessRules
type AccessRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessRule `json:"items"`
}

// Repository type metadata.
var (
	AccessRule_Kind             = "AccessRule"
	AccessRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessRule_Kind}.String()
	AccessRule_KindAPIVersion   = AccessRule_Kind + "." + CRDGroupVersion.String()
	AccessRule_GroupVersionKind = CRDGroupVersion.WithKind(AccessRule_Kind)
)

func init() {
	SchemeBuilder.Register(&AccessRule{}, &AccessRuleList{})
}
