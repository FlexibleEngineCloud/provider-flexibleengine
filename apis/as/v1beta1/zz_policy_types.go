/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicyParameters struct {

	// The alarm rule ID. This argument is mandatory
	// when scaling_policy_type is set to ALARM.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/ces/v1beta1.AlarmRule
	// +kubebuilder:validation:Optional
	AlarmID *string `json:"alarmId,omitempty" tf:"alarm_id,omitempty"`

	// Reference to a AlarmRule in ces to populate alarmId.
	// +kubebuilder:validation:Optional
	AlarmIDRef *v1.Reference `json:"alarmIdRef,omitempty" tf:"-"`

	// Selector for a AlarmRule in ces to populate alarmId.
	// +kubebuilder:validation:Optional
	AlarmIDSelector *v1.Selector `json:"alarmIdSelector,omitempty" tf:"-"`

	// The cooling duration (in seconds), and is 900 by default.
	// +kubebuilder:validation:Optional
	CoolDownTime *float64 `json:"coolDownTime,omitempty" tf:"cool_down_time,omitempty"`

	// The region in which to create the AS policy. If
	// omitted, the region argument of the provider is used. Changing this
	// creates a new AS policy.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The AS group ID. Changing this creates a new AS policy.
	// +kubebuilder:validation:Required
	ScalingGroupID *string `json:"scalingGroupId" tf:"scaling_group_id,omitempty"`

	// The action of the AS policy. The scaling_policy_action
	// structure is documented below.
	// +kubebuilder:validation:Optional
	ScalingPolicyAction []ScalingPolicyActionParameters `json:"scalingPolicyAction,omitempty" tf:"scaling_policy_action,omitempty"`

	// The name of the AS policy. The name can contain letters,
	// digits, underscores(_), and hyphens(-),and cannot exceed 64 characters.
	// +kubebuilder:validation:Required
	ScalingPolicyName *string `json:"scalingPolicyName" tf:"scaling_policy_name,omitempty"`

	// The AS policy type. The values can be ALARM, SCHEDULED,
	// and RECURRENCE.
	// +kubebuilder:validation:Required
	ScalingPolicyType *string `json:"scalingPolicyType" tf:"scaling_policy_type,omitempty"`

	// The periodic or scheduled AS policy. This argument is mandatory
	// when scaling_policy_type is set to SCHEDULED or RECURRENCE. The scheduled_policy structure
	// is documented below.
	// +kubebuilder:validation:Optional
	ScheduledPolicy []ScheduledPolicyParameters `json:"scheduledPolicy,omitempty" tf:"scheduled_policy,omitempty"`
}

type ScalingPolicyActionObservation struct {
}

type ScalingPolicyActionParameters struct {

	// The number of instances to be operated. The default number is 1.
	// +kubebuilder:validation:Optional
	InstanceNumber *float64 `json:"instanceNumber,omitempty" tf:"instance_number,omitempty"`

	// The operation to be performed. The options include ADD (default), REMOVE,
	// and SET.
	// +kubebuilder:validation:Optional
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`
}

type ScheduledPolicyObservation struct {
}

type ScheduledPolicyParameters struct {

	// The end time of the scaling action triggered periodically.
	// The time format complies with UTC. This argument is mandatory when scaling_policy_type
	// is set to RECURRENCE. The time format is YYYY-MM-DDThh:mmZ.
	// +kubebuilder:validation:Optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// The time when the scaling action is triggered. If scaling_policy_type
	// is set to SCHEDULED, the time format is YYYY-MM-DDThh:mmZ. If scaling_policy_type is set to
	// RECURRENCE, the time format is hh:mm.
	// +kubebuilder:validation:Required
	LaunchTime *string `json:"launchTime" tf:"launch_time,omitempty"`

	// The periodic triggering type. This argument is mandatory when
	// scaling_policy_type is set to RECURRENCE. The options include Daily, Weekly, and Monthly.
	// +kubebuilder:validation:Optional
	RecurrenceType *string `json:"recurrenceType,omitempty" tf:"recurrence_type,omitempty"`

	// The frequency at which scaling actions are triggered.
	// +kubebuilder:validation:Optional
	RecurrenceValue *string `json:"recurrenceValue,omitempty" tf:"recurrence_value,omitempty"`

	// The start time of the scaling action triggered periodically.
	// The time format complies with UTC. The current time is used by default. The time
	// format is YYYY-MM-DDThh:mmZ.
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

// PolicySpec defines the desired state of Policy
type PolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyParameters `json:"forProvider"`
}

// PolicyStatus defines the observed state of Policy.
type PolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Policy is the Schema for the Policys API. ""page_title: "flexibleengine_as_policy_v1"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicySpec   `json:"spec"`
	Status            PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyList contains a list of Policys
type PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Policy `json:"items"`
}

// Repository type metadata.
var (
	Policy_Kind             = "Policy"
	Policy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Policy_Kind}.String()
	Policy_KindAPIVersion   = Policy_Kind + "." + CRDGroupVersion.String()
	Policy_GroupVersionKind = CRDGroupVersion.WithKind(Policy_Kind)
)

func init() {
	SchemeBuilder.Register(&Policy{}, &PolicyList{})
}
