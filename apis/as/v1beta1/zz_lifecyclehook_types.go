/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LifecycleHookObservation struct {

	// The server time in UTC format when the lifecycle hook is created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The topic name in SMN.
	NotificationTopicName *string `json:"notificationTopicName,omitempty" tf:"notification_topic_name,omitempty"`
}

type LifecycleHookParameters struct {

	// Specifies the default lifecycle hook callback operation.
	// This operation is performed when the timeout duration expires.
	// The valid values are ABANDON and CONTINUE, default to ABANDON.
	// +kubebuilder:validation:Optional
	DefaultResult *string `json:"defaultResult,omitempty" tf:"default_result,omitempty"`

	// Specifies the lifecycle hook name.
	// This parameter can contain a maximum of 32 characters, which may consist of letters, digits,
	// underscores (_) and hyphens (-).
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies a customized notification.
	// This parameter can contains a maximum of 256 characters, which cannot contain the following characters: <>&'().
	// +kubebuilder:validation:Optional
	NotificationMessage *string `json:"notificationMessage,omitempty" tf:"notification_message,omitempty"`

	// Specifies a unique topic in SMN.
	// +kubebuilder:validation:Required
	NotificationTopicUrn *string `json:"notificationTopicUrn" tf:"notification_topic_urn,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the ID of the AS group in UUID format.
	// Changing this creates a new AS lifecycle hook.
	// +kubebuilder:validation:Required
	ScalingGroupID *string `json:"scalingGroupId" tf:"scaling_group_id,omitempty"`

	// Specifies the lifecycle hook timeout duration, which ranges from 300 to 86400 in the
	// unit of second, default to 3600.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Specifies the lifecycle hook type.
	// The valid values are following strings:
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// LifecycleHookSpec defines the desired state of LifecycleHook
type LifecycleHookSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LifecycleHookParameters `json:"forProvider"`
}

// LifecycleHookStatus defines the observed state of LifecycleHook.
type LifecycleHookStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LifecycleHookObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LifecycleHook is the Schema for the LifecycleHooks API. ""page_title: "flexibleengine_as_lifecycle_hook_v1"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type LifecycleHook struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LifecycleHookSpec   `json:"spec"`
	Status            LifecycleHookStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LifecycleHookList contains a list of LifecycleHooks
type LifecycleHookList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LifecycleHook `json:"items"`
}

// Repository type metadata.
var (
	LifecycleHook_Kind             = "LifecycleHook"
	LifecycleHook_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LifecycleHook_Kind}.String()
	LifecycleHook_KindAPIVersion   = LifecycleHook_Kind + "." + CRDGroupVersion.String()
	LifecycleHook_GroupVersionKind = CRDGroupVersion.WithKind(LifecycleHook_Kind)
)

func init() {
	SchemeBuilder.Register(&LifecycleHook{}, &LifecycleHookList{})
}
