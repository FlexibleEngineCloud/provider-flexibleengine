/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PtrrecordObservation struct {

	// The address of the FloatingIP/EIP.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The PTR record ID, which is in {region}:{floatingip_id} format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PtrrecordParameters struct {

	// Description of the PTR record.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the FloatingIP/EIP.
	// Changing this creates a new PTR record.
	// +crossplane:generate:reference:type=github.com/FlexibleEngineCloud/provider-flexibleengine/apis/eip/v1beta1.EIP
	// +kubebuilder:validation:Optional
	FloatingipID *string `json:"floatingipId,omitempty" tf:"floatingip_id,omitempty"`

	// Reference to a EIP in eip to populate floatingipId.
	// +kubebuilder:validation:Optional
	FloatingipIDRef *v1.Reference `json:"floatingipIdRef,omitempty" tf:"-"`

	// Selector for a EIP in eip to populate floatingipId.
	// +kubebuilder:validation:Optional
	FloatingipIDSelector *v1.Selector `json:"floatingipIdSelector,omitempty" tf:"-"`

	// Domain name of the PTR record. A domain name is case insensitive.
	// Uppercase letters will also be converted into lowercase letters.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The region in which to create the PTR record.
	// If omitted, the region argument of the provider is used.
	// Changing this creates a new PTR record.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// The time to live (TTL) of the record set (in seconds). The value
	// range is 300â€“2147483647. The default value is 300.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// Tags key/value pairs to associate with the PTR record.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// PtrrecordSpec defines the desired state of Ptrrecord
type PtrrecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PtrrecordParameters `json:"forProvider"`
}

// PtrrecordStatus defines the observed state of Ptrrecord.
type PtrrecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PtrrecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Ptrrecord is the Schema for the Ptrrecords API. ""page_title: "flexibleengine_dns_ptrrecord_v2"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Ptrrecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PtrrecordSpec   `json:"spec"`
	Status            PtrrecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PtrrecordList contains a list of Ptrrecords
type PtrrecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ptrrecord `json:"items"`
}

// Repository type metadata.
var (
	Ptrrecord_Kind             = "Ptrrecord"
	Ptrrecord_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Ptrrecord_Kind}.String()
	Ptrrecord_KindAPIVersion   = Ptrrecord_Kind + "." + CRDGroupVersion.String()
	Ptrrecord_GroupVersionKind = CRDGroupVersion.WithKind(Ptrrecord_Kind)
)

func init() {
	SchemeBuilder.Register(&Ptrrecord{}, &PtrrecordList{})
}
