/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ACLObservation struct {

	// The ID of identity acl.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ACLParameters struct {

	// Specifies the IPv4 CIDR blocks from which console access or api access is allowed.
	// The ip_cidrs cannot repeat. The structure is documented below.
	// +kubebuilder:validation:Optional
	IPCidrs []IPCidrsParameters `json:"ipCidrs,omitempty" tf:"ip_cidrs,omitempty"`

	// Specifies the IP address ranges from which console access or api access is allowed.
	// The ip_ranges cannot repeat. The structure is documented below.
	// +kubebuilder:validation:Optional
	IPRanges []IPRangesParameters `json:"ipRanges,omitempty" tf:"ip_ranges,omitempty"`

	// Specifies the ACL is created through the Console or API. valid value is
	// 'console'. Changing this parameter will create a new ACL.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type IPCidrsObservation struct {
}

type IPCidrsParameters struct {

	// Specifies the IPv4 CIDR block, for example, 192.168.0.0/24.
	// +kubebuilder:validation:Required
	Cidr *string `json:"cidr" tf:"cidr,omitempty"`

	// Specifies a description about an IPv4 CIDR block. This parameter can contain a
	// maximum of 255 characters and the following characters are not allowed:@#%^&*<>\.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`
}

type IPRangesObservation struct {
}

type IPRangesParameters struct {

	// Specifies a description about an IP address range. This parameter can contain a
	// maximum of 255 characters and the following characters are not allowed:@#%^&*<>\.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the Ip address range, for example, 0.0.0.0-255.255.255.0.
	// +kubebuilder:validation:Required
	Range *string `json:"range" tf:"range,omitempty"`
}

// ACLSpec defines the desired state of ACL
type ACLSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ACLParameters `json:"forProvider"`
}

// ACLStatus defines the observed state of ACL.
type ACLStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ACLObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ACL is the Schema for the ACLs API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type ACL struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ACLSpec   `json:"spec"`
	Status            ACLStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ACLList contains a list of ACLs
type ACLList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ACL `json:"items"`
}

// Repository type metadata.
var (
	ACL_Kind             = "ACL"
	ACL_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ACL_Kind}.String()
	ACL_KindAPIVersion   = ACL_Kind + "." + CRDGroupVersion.String()
	ACL_GroupVersionKind = CRDGroupVersion.WithKind(ACL_Kind)
)

func init() {
	SchemeBuilder.Register(&ACL{}, &ACLList{})
}
