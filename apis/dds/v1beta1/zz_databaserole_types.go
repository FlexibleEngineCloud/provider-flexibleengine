/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabaseRoleObservation struct {

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The list of database privileges owned by the current role, includes all privileges
	// inherited by owned roles. The object structure is documented below.
	InheritedPrivileges []InheritedPrivilegesObservation `json:"inheritedPrivileges,omitempty" tf:"inherited_privileges,omitempty"`

	// The list of database privileges owned by the current role.
	// The object structure is documented below.
	Privileges []PrivilegesObservation `json:"privileges,omitempty" tf:"privileges,omitempty"`
}

type DatabaseRoleParameters struct {

	// Specifies the database name to which the role belongs.
	// The name can contain 1 to 64 characters, only letters, digits and underscores (_) are allowed.
	// Changing this parameter will create a new role.
	// +kubebuilder:validation:Required
	DBName *string `json:"dbName" tf:"db_name,omitempty"`

	// Specifies the DDS instance ID to which the role belongs.
	// Changing this parameter will create a new role.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Specifies the role name.
	// The name can contain 1 to 64 characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
	// allowed. Changing this parameter will create a new role.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the region where the DDS instance is located.
	// Changing this parameter will create a new role.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the list of roles owned by the current role.
	// The object structure is documented below.
	// Changing this parameter will create a new role.
	// +kubebuilder:validation:Optional
	Roles []RolesParameters `json:"roles,omitempty" tf:"roles,omitempty"`
}

type InheritedPrivilegesObservation struct {

	// The operation permission list.
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// The details of the resource to which the privilege belongs.
	// The object structure is documented below.
	Resources []ResourcesObservation `json:"resources,omitempty" tf:"resources,omitempty"`
}

type InheritedPrivilegesParameters struct {
}

type PrivilegesObservation struct {

	// The operation permission list.
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// The details of the resource to which the privilege belongs.
	// The object structure is documented below.
	Resources []PrivilegesResourcesObservation `json:"resources,omitempty" tf:"resources,omitempty"`
}

type PrivilegesParameters struct {
}

type PrivilegesResourcesObservation struct {

	// The database collection type.
	Collection *string `json:"collection,omitempty" tf:"collection,omitempty"`

	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new role.
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`
}

type PrivilegesResourcesParameters struct {
}

type ResourcesObservation struct {

	// The database collection type.
	Collection *string `json:"collection,omitempty" tf:"collection,omitempty"`

	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new role.
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`
}

type ResourcesParameters struct {
}

type RolesObservation struct {
}

type RolesParameters struct {

	// Specifies the database name to which this owned role belongs.
	// Changing this parameter will create a new role.
	// +kubebuilder:validation:Required
	DBName *string `json:"dbName" tf:"db_name,omitempty"`

	// Specifies the name of role owned by the current role.
	// The name can contain 1 to 64 characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
	// allowed. Changing this parameter will create a new role.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// DatabaseRoleSpec defines the desired state of DatabaseRole
type DatabaseRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseRoleParameters `json:"forProvider"`
}

// DatabaseRoleStatus defines the observed state of DatabaseRole.
type DatabaseRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseRole is the Schema for the DatabaseRoles API. ""page_title: "flexibleengine_dds_database_role"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type DatabaseRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseRoleSpec   `json:"spec"`
	Status            DatabaseRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseRoleList contains a list of DatabaseRoles
type DatabaseRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatabaseRole `json:"items"`
}

// Repository type metadata.
var (
	DatabaseRole_Kind             = "DatabaseRole"
	DatabaseRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DatabaseRole_Kind}.String()
	DatabaseRole_KindAPIVersion   = DatabaseRole_Kind + "." + CRDGroupVersion.String()
	DatabaseRole_GroupVersionKind = CRDGroupVersion.WithKind(DatabaseRole_Kind)
)

func init() {
	SchemeBuilder.Register(&DatabaseRole{}, &DatabaseRoleList{})
}
