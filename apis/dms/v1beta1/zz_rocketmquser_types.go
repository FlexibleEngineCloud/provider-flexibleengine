/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupPermsObservation struct {
}

type GroupPermsParameters struct {

	// Indicates the name of a topic or consumer group.
	// Indicates the name of a topic or consumer group.
	// +crossplane:generate:reference:type=RocketMQConsumerGroup
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Reference to a RocketMQConsumerGroup to populate name.
	// +kubebuilder:validation:Optional
	NameRef *v1.Reference `json:"nameRef,omitempty" tf:"-"`

	// Selector for a RocketMQConsumerGroup to populate name.
	// +kubebuilder:validation:Optional
	NameSelector *v1.Selector `json:"nameSelector,omitempty" tf:"-"`

	// Indicates the permissions of the topic or consumer group.
	// Value options: PUB|SUB, PUB, SUB, DENY.
	// Indicates the permissions of the topic or consumer group.
	// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
	// +kubebuilder:validation:Optional
	Perm *string `json:"perm,omitempty" tf:"perm,omitempty"`
}

type RocketMQUserObservation struct {

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RocketMQUserParameters struct {

	// Specifies the access key of the user.
	// Changing this parameter will create a new resource.
	// Specifies the access key of the user.
	// +kubebuilder:validation:Required
	AccessKey *string `json:"accessKey" tf:"access_key,omitempty"`

	// Specifies whether the user is an administrator.
	// Specifies whether the user is an administrator.
	// +kubebuilder:validation:Optional
	Admin *bool `json:"admin,omitempty" tf:"admin,omitempty"`

	// Specifies the default consumer group permissions.
	// Value options: PUB|SUB, PUB, SUB, DENY.
	// Specifies the default consumer group permissions.
	// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
	// +kubebuilder:validation:Optional
	DefaultGroupPerm *string `json:"defaultGroupPerm,omitempty" tf:"default_group_perm,omitempty"`

	// Specifies the default topic permissions.
	// Value options: PUB|SUB, PUB, SUB, DENY.
	// Specifies the default topic permissions.
	// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
	// +kubebuilder:validation:Optional
	DefaultTopicPerm *string `json:"defaultTopicPerm,omitempty" tf:"default_topic_perm,omitempty"`

	// Specifies the special consumer group permissions.
	// The permission structure is documented below.
	// Specifies the special consumer group permissions.
	// +kubebuilder:validation:Optional
	GroupPerms []GroupPermsParameters `json:"groupPerms,omitempty" tf:"group_perms,omitempty"`

	// Specifies the ID of the rocketMQ instance.
	// Changing this parameter will create a new resource.
	// Specifies the ID of the rocketMQ instance.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/dms/v1beta1.RocketMQInstance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a RocketMQInstance in dms to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a RocketMQInstance in dms to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the secret key of the user.
	// Changing this parameter will create a new resource.
	// Specifies the secret key of the user.
	// +kubebuilder:validation:Required
	SecretKey *string `json:"secretKey" tf:"secret_key,omitempty"`

	// Specifies the special topic permissions.
	// The permission structure is documented below.
	// Specifies the special topic permissions.
	// +kubebuilder:validation:Optional
	TopicPerms []TopicPermsParameters `json:"topicPerms,omitempty" tf:"topic_perms,omitempty"`

	// Specifies the IP address whitelist.
	// Specifies the IP address whitelist.
	// +kubebuilder:validation:Optional
	WhiteRemoteAddress *string `json:"whiteRemoteAddress,omitempty" tf:"white_remote_address,omitempty"`
}

type TopicPermsObservation struct {
}

type TopicPermsParameters struct {

	// Indicates the name of a topic or consumer group.
	// Indicates the name of a topic or consumer group.
	// +crossplane:generate:reference:type=RocketMQTopic
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Reference to a RocketMQTopic to populate name.
	// +kubebuilder:validation:Optional
	NameRef *v1.Reference `json:"nameRef,omitempty" tf:"-"`

	// Selector for a RocketMQTopic to populate name.
	// +kubebuilder:validation:Optional
	NameSelector *v1.Selector `json:"nameSelector,omitempty" tf:"-"`

	// Indicates the permissions of the topic or consumer group.
	// Value options: PUB|SUB, PUB, SUB, DENY.
	// Indicates the permissions of the topic or consumer group.
	// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
	// +kubebuilder:validation:Optional
	Perm *string `json:"perm,omitempty" tf:"perm,omitempty"`
}

// RocketMQUserSpec defines the desired state of RocketMQUser
type RocketMQUserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RocketMQUserParameters `json:"forProvider"`
}

// RocketMQUserStatus defines the observed state of RocketMQUser.
type RocketMQUserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RocketMQUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RocketMQUser is the Schema for the RocketMQUsers API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type RocketMQUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RocketMQUserSpec   `json:"spec"`
	Status            RocketMQUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RocketMQUserList contains a list of RocketMQUsers
type RocketMQUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RocketMQUser `json:"items"`
}

// Repository type metadata.
var (
	RocketMQUser_Kind             = "RocketMQUser"
	RocketMQUser_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RocketMQUser_Kind}.String()
	RocketMQUser_KindAPIVersion   = RocketMQUser_Kind + "." + CRDGroupVersion.String()
	RocketMQUser_GroupVersionKind = CRDGroupVersion.WithKind(RocketMQUser_Kind)
)

func init() {
	SchemeBuilder.Register(&RocketMQUser{}, &RocketMQUserList{})
}
