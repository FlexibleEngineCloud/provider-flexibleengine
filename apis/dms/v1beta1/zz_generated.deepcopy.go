//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BrokersObservation) DeepCopyInto(out *BrokersObservation) {
	*out = *in
	if in.ReadQueueNum != nil {
		in, out := &in.ReadQueueNum, &out.ReadQueueNum
		*out = new(float64)
		**out = **in
	}
	if in.WriteQueueNum != nil {
		in, out := &in.WriteQueueNum, &out.WriteQueueNum
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BrokersObservation.
func (in *BrokersObservation) DeepCopy() *BrokersObservation {
	if in == nil {
		return nil
	}
	out := new(BrokersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BrokersParameters) DeepCopyInto(out *BrokersParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BrokersParameters.
func (in *BrokersParameters) DeepCopy() *BrokersParameters {
	if in == nil {
		return nil
	}
	out := new(BrokersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrossVPCAccessesObservation) DeepCopyInto(out *CrossVPCAccessesObservation) {
	*out = *in
	if in.AdvertisedIP != nil {
		in, out := &in.AdvertisedIP, &out.AdvertisedIP
		*out = new(string)
		**out = **in
	}
	if in.LisenterIP != nil {
		in, out := &in.LisenterIP, &out.LisenterIP
		*out = new(string)
		**out = **in
	}
	if in.ListenerIP != nil {
		in, out := &in.ListenerIP, &out.ListenerIP
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PortID != nil {
		in, out := &in.PortID, &out.PortID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrossVPCAccessesObservation.
func (in *CrossVPCAccessesObservation) DeepCopy() *CrossVPCAccessesObservation {
	if in == nil {
		return nil
	}
	out := new(CrossVPCAccessesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrossVPCAccessesParameters) DeepCopyInto(out *CrossVPCAccessesParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrossVPCAccessesParameters.
func (in *CrossVPCAccessesParameters) DeepCopy() *CrossVPCAccessesParameters {
	if in == nil {
		return nil
	}
	out := new(CrossVPCAccessesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupPermsObservation) DeepCopyInto(out *GroupPermsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupPermsObservation.
func (in *GroupPermsObservation) DeepCopy() *GroupPermsObservation {
	if in == nil {
		return nil
	}
	out := new(GroupPermsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupPermsParameters) DeepCopyInto(out *GroupPermsParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameRef != nil {
		in, out := &in.NameRef, &out.NameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NameSelector != nil {
		in, out := &in.NameSelector, &out.NameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Perm != nil {
		in, out := &in.Perm, &out.Perm
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupPermsParameters.
func (in *GroupPermsParameters) DeepCopy() *GroupPermsParameters {
	if in == nil {
		return nil
	}
	out := new(GroupPermsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaInstance) DeepCopyInto(out *KafkaInstance) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaInstance.
func (in *KafkaInstance) DeepCopy() *KafkaInstance {
	if in == nil {
		return nil
	}
	out := new(KafkaInstance)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaInstance) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaInstanceList) DeepCopyInto(out *KafkaInstanceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KafkaInstance, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaInstanceList.
func (in *KafkaInstanceList) DeepCopy() *KafkaInstanceList {
	if in == nil {
		return nil
	}
	out := new(KafkaInstanceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaInstanceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaInstanceObservation) DeepCopyInto(out *KafkaInstanceObservation) {
	*out = *in
	if in.ConnectAddress != nil {
		in, out := &in.ConnectAddress, &out.ConnectAddress
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineType != nil {
		in, out := &in.EngineType, &out.EngineType
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ManegementConnectAddress != nil {
		in, out := &in.ManegementConnectAddress, &out.ManegementConnectAddress
		*out = new(string)
		**out = **in
	}
	if in.NodeNum != nil {
		in, out := &in.NodeNum, &out.NodeNum
		*out = new(float64)
		**out = **in
	}
	if in.PartitionNum != nil {
		in, out := &in.PartitionNum, &out.PartitionNum
		*out = new(float64)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ProductSpecCode != nil {
		in, out := &in.ProductSpecCode, &out.ProductSpecCode
		*out = new(string)
		**out = **in
	}
	if in.SSLEnable != nil {
		in, out := &in.SSLEnable, &out.SSLEnable
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupName != nil {
		in, out := &in.SecurityGroupName, &out.SecurityGroupName
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SubnetName != nil {
		in, out := &in.SubnetName, &out.SubnetName
		*out = new(string)
		**out = **in
	}
	if in.UsedStorageSpace != nil {
		in, out := &in.UsedStorageSpace, &out.UsedStorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.VPCName != nil {
		in, out := &in.VPCName, &out.VPCName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaInstanceObservation.
func (in *KafkaInstanceObservation) DeepCopy() *KafkaInstanceObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaInstanceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaInstanceParameters) DeepCopyInto(out *KafkaInstanceParameters) {
	*out = *in
	if in.AccessUser != nil {
		in, out := &in.AccessUser, &out.AccessUser
		*out = new(string)
		**out = **in
	}
	if in.AvailabilityZones != nil {
		in, out := &in.AvailabilityZones, &out.AvailabilityZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Bandwidth != nil {
		in, out := &in.Bandwidth, &out.Bandwidth
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EnableAutoTopic != nil {
		in, out := &in.EnableAutoTopic, &out.EnableAutoTopic
		*out = new(bool)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.ManagerPasswordSecretRef != nil {
		in, out := &in.ManagerPasswordSecretRef, &out.ManagerPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ManagerUser != nil {
		in, out := &in.ManagerUser, &out.ManagerUser
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRef != nil {
		in, out := &in.SecurityGroupIDRef, &out.SecurityGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaInstanceParameters.
func (in *KafkaInstanceParameters) DeepCopy() *KafkaInstanceParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaInstanceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaInstanceSpec) DeepCopyInto(out *KafkaInstanceSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaInstanceSpec.
func (in *KafkaInstanceSpec) DeepCopy() *KafkaInstanceSpec {
	if in == nil {
		return nil
	}
	out := new(KafkaInstanceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaInstanceStatus) DeepCopyInto(out *KafkaInstanceStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaInstanceStatus.
func (in *KafkaInstanceStatus) DeepCopy() *KafkaInstanceStatus {
	if in == nil {
		return nil
	}
	out := new(KafkaInstanceStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopic) DeepCopyInto(out *KafkaTopic) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopic.
func (in *KafkaTopic) DeepCopy() *KafkaTopic {
	if in == nil {
		return nil
	}
	out := new(KafkaTopic)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaTopic) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicList) DeepCopyInto(out *KafkaTopicList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KafkaTopic, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicList.
func (in *KafkaTopicList) DeepCopy() *KafkaTopicList {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaTopicList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicObservation) DeepCopyInto(out *KafkaTopicObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicObservation.
func (in *KafkaTopicObservation) DeepCopy() *KafkaTopicObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicParameters) DeepCopyInto(out *KafkaTopicParameters) {
	*out = *in
	if in.AgingTime != nil {
		in, out := &in.AgingTime, &out.AgingTime
		*out = new(float64)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceIDRef != nil {
		in, out := &in.InstanceIDRef, &out.InstanceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.InstanceIDSelector != nil {
		in, out := &in.InstanceIDSelector, &out.InstanceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Partitions != nil {
		in, out := &in.Partitions, &out.Partitions
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Replicas != nil {
		in, out := &in.Replicas, &out.Replicas
		*out = new(float64)
		**out = **in
	}
	if in.SyncFlushing != nil {
		in, out := &in.SyncFlushing, &out.SyncFlushing
		*out = new(bool)
		**out = **in
	}
	if in.SyncReplication != nil {
		in, out := &in.SyncReplication, &out.SyncReplication
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicParameters.
func (in *KafkaTopicParameters) DeepCopy() *KafkaTopicParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicSpec) DeepCopyInto(out *KafkaTopicSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicSpec.
func (in *KafkaTopicSpec) DeepCopy() *KafkaTopicSpec {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicStatus) DeepCopyInto(out *KafkaTopicStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicStatus.
func (in *KafkaTopicStatus) DeepCopy() *KafkaTopicStatus {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUser) DeepCopyInto(out *KafkaUser) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUser.
func (in *KafkaUser) DeepCopy() *KafkaUser {
	if in == nil {
		return nil
	}
	out := new(KafkaUser)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaUser) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUserList) DeepCopyInto(out *KafkaUserList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KafkaUser, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUserList.
func (in *KafkaUserList) DeepCopy() *KafkaUserList {
	if in == nil {
		return nil
	}
	out := new(KafkaUserList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaUserList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUserObservation) DeepCopyInto(out *KafkaUserObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUserObservation.
func (in *KafkaUserObservation) DeepCopy() *KafkaUserObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUserParameters) DeepCopyInto(out *KafkaUserParameters) {
	*out = *in
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceIDRef != nil {
		in, out := &in.InstanceIDRef, &out.InstanceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.InstanceIDSelector != nil {
		in, out := &in.InstanceIDSelector, &out.InstanceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUserParameters.
func (in *KafkaUserParameters) DeepCopy() *KafkaUserParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUserSpec) DeepCopyInto(out *KafkaUserSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUserSpec.
func (in *KafkaUserSpec) DeepCopy() *KafkaUserSpec {
	if in == nil {
		return nil
	}
	out := new(KafkaUserSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUserStatus) DeepCopyInto(out *KafkaUserStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUserStatus.
func (in *KafkaUserStatus) DeepCopy() *KafkaUserStatus {
	if in == nil {
		return nil
	}
	out := new(KafkaUserStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQConsumerGroup) DeepCopyInto(out *RocketMQConsumerGroup) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQConsumerGroup.
func (in *RocketMQConsumerGroup) DeepCopy() *RocketMQConsumerGroup {
	if in == nil {
		return nil
	}
	out := new(RocketMQConsumerGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RocketMQConsumerGroup) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQConsumerGroupList) DeepCopyInto(out *RocketMQConsumerGroupList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RocketMQConsumerGroup, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQConsumerGroupList.
func (in *RocketMQConsumerGroupList) DeepCopy() *RocketMQConsumerGroupList {
	if in == nil {
		return nil
	}
	out := new(RocketMQConsumerGroupList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RocketMQConsumerGroupList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQConsumerGroupObservation) DeepCopyInto(out *RocketMQConsumerGroupObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQConsumerGroupObservation.
func (in *RocketMQConsumerGroupObservation) DeepCopy() *RocketMQConsumerGroupObservation {
	if in == nil {
		return nil
	}
	out := new(RocketMQConsumerGroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQConsumerGroupParameters) DeepCopyInto(out *RocketMQConsumerGroupParameters) {
	*out = *in
	if in.Broadcast != nil {
		in, out := &in.Broadcast, &out.Broadcast
		*out = new(bool)
		**out = **in
	}
	if in.Brokers != nil {
		in, out := &in.Brokers, &out.Brokers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceIDRef != nil {
		in, out := &in.InstanceIDRef, &out.InstanceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.InstanceIDSelector != nil {
		in, out := &in.InstanceIDSelector, &out.InstanceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RetryMaxTimes != nil {
		in, out := &in.RetryMaxTimes, &out.RetryMaxTimes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQConsumerGroupParameters.
func (in *RocketMQConsumerGroupParameters) DeepCopy() *RocketMQConsumerGroupParameters {
	if in == nil {
		return nil
	}
	out := new(RocketMQConsumerGroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQConsumerGroupSpec) DeepCopyInto(out *RocketMQConsumerGroupSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQConsumerGroupSpec.
func (in *RocketMQConsumerGroupSpec) DeepCopy() *RocketMQConsumerGroupSpec {
	if in == nil {
		return nil
	}
	out := new(RocketMQConsumerGroupSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQConsumerGroupStatus) DeepCopyInto(out *RocketMQConsumerGroupStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQConsumerGroupStatus.
func (in *RocketMQConsumerGroupStatus) DeepCopy() *RocketMQConsumerGroupStatus {
	if in == nil {
		return nil
	}
	out := new(RocketMQConsumerGroupStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQInstance) DeepCopyInto(out *RocketMQInstance) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQInstance.
func (in *RocketMQInstance) DeepCopy() *RocketMQInstance {
	if in == nil {
		return nil
	}
	out := new(RocketMQInstance)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RocketMQInstance) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQInstanceList) DeepCopyInto(out *RocketMQInstanceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RocketMQInstance, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQInstanceList.
func (in *RocketMQInstanceList) DeepCopy() *RocketMQInstanceList {
	if in == nil {
		return nil
	}
	out := new(RocketMQInstanceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RocketMQInstanceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQInstanceObservation) DeepCopyInto(out *RocketMQInstanceObservation) {
	*out = *in
	if in.BrokerAddress != nil {
		in, out := &in.BrokerAddress, &out.BrokerAddress
		*out = new(string)
		**out = **in
	}
	if in.CrossVPCAccesses != nil {
		in, out := &in.CrossVPCAccesses, &out.CrossVPCAccesses
		*out = make([]CrossVPCAccessesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MaintainBegin != nil {
		in, out := &in.MaintainBegin, &out.MaintainBegin
		*out = new(string)
		**out = **in
	}
	if in.MaintainEnd != nil {
		in, out := &in.MaintainEnd, &out.MaintainEnd
		*out = new(string)
		**out = **in
	}
	if in.NamesrvAddress != nil {
		in, out := &in.NamesrvAddress, &out.NamesrvAddress
		*out = new(string)
		**out = **in
	}
	if in.NewSpecBillingEnable != nil {
		in, out := &in.NewSpecBillingEnable, &out.NewSpecBillingEnable
		*out = new(bool)
		**out = **in
	}
	if in.NodeNum != nil {
		in, out := &in.NodeNum, &out.NodeNum
		*out = new(float64)
		**out = **in
	}
	if in.PublicBrokerAddress != nil {
		in, out := &in.PublicBrokerAddress, &out.PublicBrokerAddress
		*out = new(string)
		**out = **in
	}
	if in.PublicNamesrvAddress != nil {
		in, out := &in.PublicNamesrvAddress, &out.PublicNamesrvAddress
		*out = new(string)
		**out = **in
	}
	if in.PublicipAddress != nil {
		in, out := &in.PublicipAddress, &out.PublicipAddress
		*out = new(string)
		**out = **in
	}
	if in.ResourceSpecCode != nil {
		in, out := &in.ResourceSpecCode, &out.ResourceSpecCode
		*out = new(string)
		**out = **in
	}
	if in.Specification != nil {
		in, out := &in.Specification, &out.Specification
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UsedStorageSpace != nil {
		in, out := &in.UsedStorageSpace, &out.UsedStorageSpace
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQInstanceObservation.
func (in *RocketMQInstanceObservation) DeepCopy() *RocketMQInstanceObservation {
	if in == nil {
		return nil
	}
	out := new(RocketMQInstanceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQInstanceParameters) DeepCopyInto(out *RocketMQInstanceParameters) {
	*out = *in
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.AvailabilityZones != nil {
		in, out := &in.AvailabilityZones, &out.AvailabilityZones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BrokerNum != nil {
		in, out := &in.BrokerNum, &out.BrokerNum
		*out = new(float64)
		**out = **in
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EnableACL != nil {
		in, out := &in.EnableACL, &out.EnableACL
		*out = new(bool)
		**out = **in
	}
	if in.EnablePublicip != nil {
		in, out := &in.EnablePublicip, &out.EnablePublicip
		*out = new(bool)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.PublicipID != nil {
		in, out := &in.PublicipID, &out.PublicipID
		*out = new(string)
		**out = **in
	}
	if in.PublicipIDRef != nil {
		in, out := &in.PublicipIDRef, &out.PublicipIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.PublicipIDSelector != nil {
		in, out := &in.PublicipIDSelector, &out.PublicipIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RetentionPolicy != nil {
		in, out := &in.RetentionPolicy, &out.RetentionPolicy
		*out = new(bool)
		**out = **in
	}
	if in.SSLEnable != nil {
		in, out := &in.SSLEnable, &out.SSLEnable
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRef != nil {
		in, out := &in.SecurityGroupIDRef, &out.SecurityGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageSpecCode != nil {
		in, out := &in.StorageSpecCode, &out.StorageSpecCode
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQInstanceParameters.
func (in *RocketMQInstanceParameters) DeepCopy() *RocketMQInstanceParameters {
	if in == nil {
		return nil
	}
	out := new(RocketMQInstanceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQInstanceSpec) DeepCopyInto(out *RocketMQInstanceSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQInstanceSpec.
func (in *RocketMQInstanceSpec) DeepCopy() *RocketMQInstanceSpec {
	if in == nil {
		return nil
	}
	out := new(RocketMQInstanceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQInstanceStatus) DeepCopyInto(out *RocketMQInstanceStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQInstanceStatus.
func (in *RocketMQInstanceStatus) DeepCopy() *RocketMQInstanceStatus {
	if in == nil {
		return nil
	}
	out := new(RocketMQInstanceStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQTopic) DeepCopyInto(out *RocketMQTopic) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQTopic.
func (in *RocketMQTopic) DeepCopy() *RocketMQTopic {
	if in == nil {
		return nil
	}
	out := new(RocketMQTopic)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RocketMQTopic) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQTopicList) DeepCopyInto(out *RocketMQTopicList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RocketMQTopic, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQTopicList.
func (in *RocketMQTopicList) DeepCopy() *RocketMQTopicList {
	if in == nil {
		return nil
	}
	out := new(RocketMQTopicList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RocketMQTopicList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQTopicObservation) DeepCopyInto(out *RocketMQTopicObservation) {
	*out = *in
	if in.Brokers != nil {
		in, out := &in.Brokers, &out.Brokers
		*out = make([]BrokersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQTopicObservation.
func (in *RocketMQTopicObservation) DeepCopy() *RocketMQTopicObservation {
	if in == nil {
		return nil
	}
	out := new(RocketMQTopicObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQTopicParameters) DeepCopyInto(out *RocketMQTopicParameters) {
	*out = *in
	if in.Brokers != nil {
		in, out := &in.Brokers, &out.Brokers
		*out = make([]BrokersParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceIDRef != nil {
		in, out := &in.InstanceIDRef, &out.InstanceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.InstanceIDSelector != nil {
		in, out := &in.InstanceIDSelector, &out.InstanceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = new(string)
		**out = **in
	}
	if in.QueueNum != nil {
		in, out := &in.QueueNum, &out.QueueNum
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.TotalReadQueueNum != nil {
		in, out := &in.TotalReadQueueNum, &out.TotalReadQueueNum
		*out = new(float64)
		**out = **in
	}
	if in.TotalWriteQueueNum != nil {
		in, out := &in.TotalWriteQueueNum, &out.TotalWriteQueueNum
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQTopicParameters.
func (in *RocketMQTopicParameters) DeepCopy() *RocketMQTopicParameters {
	if in == nil {
		return nil
	}
	out := new(RocketMQTopicParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQTopicSpec) DeepCopyInto(out *RocketMQTopicSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQTopicSpec.
func (in *RocketMQTopicSpec) DeepCopy() *RocketMQTopicSpec {
	if in == nil {
		return nil
	}
	out := new(RocketMQTopicSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQTopicStatus) DeepCopyInto(out *RocketMQTopicStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQTopicStatus.
func (in *RocketMQTopicStatus) DeepCopy() *RocketMQTopicStatus {
	if in == nil {
		return nil
	}
	out := new(RocketMQTopicStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQUser) DeepCopyInto(out *RocketMQUser) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQUser.
func (in *RocketMQUser) DeepCopy() *RocketMQUser {
	if in == nil {
		return nil
	}
	out := new(RocketMQUser)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RocketMQUser) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQUserList) DeepCopyInto(out *RocketMQUserList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RocketMQUser, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQUserList.
func (in *RocketMQUserList) DeepCopy() *RocketMQUserList {
	if in == nil {
		return nil
	}
	out := new(RocketMQUserList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RocketMQUserList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQUserObservation) DeepCopyInto(out *RocketMQUserObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQUserObservation.
func (in *RocketMQUserObservation) DeepCopy() *RocketMQUserObservation {
	if in == nil {
		return nil
	}
	out := new(RocketMQUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQUserParameters) DeepCopyInto(out *RocketMQUserParameters) {
	*out = *in
	if in.AccessKey != nil {
		in, out := &in.AccessKey, &out.AccessKey
		*out = new(string)
		**out = **in
	}
	if in.Admin != nil {
		in, out := &in.Admin, &out.Admin
		*out = new(bool)
		**out = **in
	}
	if in.DefaultGroupPerm != nil {
		in, out := &in.DefaultGroupPerm, &out.DefaultGroupPerm
		*out = new(string)
		**out = **in
	}
	if in.DefaultTopicPerm != nil {
		in, out := &in.DefaultTopicPerm, &out.DefaultTopicPerm
		*out = new(string)
		**out = **in
	}
	if in.GroupPerms != nil {
		in, out := &in.GroupPerms, &out.GroupPerms
		*out = make([]GroupPermsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceIDRef != nil {
		in, out := &in.InstanceIDRef, &out.InstanceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.InstanceIDSelector != nil {
		in, out := &in.InstanceIDSelector, &out.InstanceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecretKey != nil {
		in, out := &in.SecretKey, &out.SecretKey
		*out = new(string)
		**out = **in
	}
	if in.TopicPerms != nil {
		in, out := &in.TopicPerms, &out.TopicPerms
		*out = make([]TopicPermsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WhiteRemoteAddress != nil {
		in, out := &in.WhiteRemoteAddress, &out.WhiteRemoteAddress
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQUserParameters.
func (in *RocketMQUserParameters) DeepCopy() *RocketMQUserParameters {
	if in == nil {
		return nil
	}
	out := new(RocketMQUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQUserSpec) DeepCopyInto(out *RocketMQUserSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQUserSpec.
func (in *RocketMQUserSpec) DeepCopy() *RocketMQUserSpec {
	if in == nil {
		return nil
	}
	out := new(RocketMQUserSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RocketMQUserStatus) DeepCopyInto(out *RocketMQUserStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RocketMQUserStatus.
func (in *RocketMQUserStatus) DeepCopy() *RocketMQUserStatus {
	if in == nil {
		return nil
	}
	out := new(RocketMQUserStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicPermsObservation) DeepCopyInto(out *TopicPermsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicPermsObservation.
func (in *TopicPermsObservation) DeepCopy() *TopicPermsObservation {
	if in == nil {
		return nil
	}
	out := new(TopicPermsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicPermsParameters) DeepCopyInto(out *TopicPermsParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameRef != nil {
		in, out := &in.NameRef, &out.NameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NameSelector != nil {
		in, out := &in.NameSelector, &out.NameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Perm != nil {
		in, out := &in.Perm, &out.Perm
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicPermsParameters.
func (in *TopicPermsParameters) DeepCopy() *TopicPermsParameters {
	if in == nil {
		return nil
	}
	out := new(TopicPermsParameters)
	in.DeepCopyInto(out)
	return out
}
