/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BrokersObservation struct {

	// Indicates the read queues number of the broker. It's useless when create a topic.
	// Indicates the read queues number of the broker.
	ReadQueueNum *float64 `json:"readQueueNum,omitempty" tf:"read_queue_num,omitempty"`

	// Indicates the read queues number of the broker. It's useless when create a topic.
	// Indicates the read queues number of the broker.
	WriteQueueNum *float64 `json:"writeQueueNum,omitempty" tf:"write_queue_num,omitempty"`
}

type BrokersParameters struct {

	// Specifies the name of the topic.
	// Indicates the name of the broker.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type RocketMQTopicObservation struct {

	// Specifies the list of associated brokers of the topic.
	// Specifies the list of associated brokers of the topic.
	// +kubebuilder:validation:Optional
	Brokers []BrokersObservation `json:"brokers,omitempty" tf:"brokers,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RocketMQTopicParameters struct {

	// Specifies the list of associated brokers of the topic.
	// Specifies the list of associated brokers of the topic.
	// +kubebuilder:validation:Optional
	Brokers []BrokersParameters `json:"brokers,omitempty" tf:"brokers,omitempty"`

	// Specifies the ID of the rocketMQ instance.
	// +crossplane:generate:reference:type=github.com/FlexibleEngineCloud/provider-flexibleengine/apis/dms/v1beta1.RocketMQInstance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a RocketMQInstance in dms to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a RocketMQInstance in dms to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Specifies the name of the topic.
	// Specifies the name of the topic.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the permissions of the topic.
	// Value options: all, sub, pub. Default to all.
	// Specifies the permissions of the topic.
	// +kubebuilder:validation:Optional
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// Specifies the number of queues. Default to 3.
	// Specifies the number of queues.
	// +kubebuilder:validation:Optional
	QueueNum *float64 `json:"queueNum,omitempty" tf:"queue_num,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the total number of read queues.
	// Specifies the total number of read queues.
	// +kubebuilder:validation:Optional
	TotalReadQueueNum *float64 `json:"totalReadQueueNum,omitempty" tf:"total_read_queue_num,omitempty"`

	// Specifies the total number of write queues.
	// Specifies the total number of write queues.
	// +kubebuilder:validation:Optional
	TotalWriteQueueNum *float64 `json:"totalWriteQueueNum,omitempty" tf:"total_write_queue_num,omitempty"`
}

// RocketMQTopicSpec defines the desired state of RocketMQTopic
type RocketMQTopicSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RocketMQTopicParameters `json:"forProvider"`
}

// RocketMQTopicStatus defines the observed state of RocketMQTopic.
type RocketMQTopicStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RocketMQTopicObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RocketMQTopic is the Schema for the RocketMQTopics API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type RocketMQTopic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RocketMQTopicSpec   `json:"spec"`
	Status            RocketMQTopicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RocketMQTopicList contains a list of RocketMQTopics
type RocketMQTopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RocketMQTopic `json:"items"`
}

// Repository type metadata.
var (
	RocketMQTopic_Kind             = "RocketMQTopic"
	RocketMQTopic_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RocketMQTopic_Kind}.String()
	RocketMQTopic_KindAPIVersion   = RocketMQTopic_Kind + "." + CRDGroupVersion.String()
	RocketMQTopic_GroupVersionKind = CRDGroupVersion.WithKind(RocketMQTopic_Kind)
)

func init() {
	SchemeBuilder.Register(&RocketMQTopic{}, &RocketMQTopicList{})
}
