/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabasePrivilegeObservation struct {

	// The resource ID of database privilege which is formatted <instance_id>/<database_name>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DatabasePrivilegeParameters struct {

	// Specifies the database name. Changing this creates a new resource.
	// +kubebuilder:validation:Required
	DBName *string `json:"dbName" tf:"db_name,omitempty"`

	// Specifies the RDS instance ID. Changing this will create a new resource.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// The region in which to create the RDS database privilege resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the account that associated with the database. This parameter supports
	// a maximum of 50 elements. Structure is documented below. Changing this creates a new resource.
	// +kubebuilder:validation:Required
	Users []UsersParameters `json:"users" tf:"users,omitempty"`
}

type UsersObservation struct {
}

type UsersParameters struct {

	// Specifies the username of the database account. Changing this creates a new resource.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the read-only permission. The value can be:
	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`
}

// DatabasePrivilegeSpec defines the desired state of DatabasePrivilege
type DatabasePrivilegeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabasePrivilegeParameters `json:"forProvider"`
}

// DatabasePrivilegeStatus defines the observed state of DatabasePrivilege.
type DatabasePrivilegeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabasePrivilegeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatabasePrivilege is the Schema for the DatabasePrivileges API. ""page_title: "flexibleengine_rds_database_privilege"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type DatabasePrivilege struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabasePrivilegeSpec   `json:"spec"`
	Status            DatabasePrivilegeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabasePrivilegeList contains a list of DatabasePrivileges
type DatabasePrivilegeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatabasePrivilege `json:"items"`
}

// Repository type metadata.
var (
	DatabasePrivilege_Kind             = "DatabasePrivilege"
	DatabasePrivilege_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DatabasePrivilege_Kind}.String()
	DatabasePrivilege_KindAPIVersion   = DatabasePrivilege_Kind + "." + CRDGroupVersion.String()
	DatabasePrivilege_GroupVersionKind = CRDGroupVersion.WithKind(DatabasePrivilege_Kind)
)

func init() {
	SchemeBuilder.Register(&DatabasePrivilege{}, &DatabasePrivilegeList{})
}
