/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatasetVersionObservation struct {

	// The creation time, in UTC format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The total number of samples.
	Files *float64 `json:"files,omitempty" tf:"files,omitempty"`

	// The resource ID in format of dataset_id/version_id. It is composed of dataset ID and version ID,
	// separated by a slash.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether this version is current version.
	IsCurrent *bool `json:"isCurrent,omitempty" tf:"is_current,omitempty"`

	// The label type of the dataset version. Valid values are as follows:
	LabelingType *string `json:"labelingType,omitempty" tf:"labeling_type,omitempty"`

	// The status of the dataset version. Valid values are as follows:
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// The path to save the manifest file of the version.
	StoragePath *string `json:"storagePath,omitempty" tf:"storage_path,omitempty"`

	// The last update time, in UTC format.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// Whether the data has been verified by the verification algorithm before publishing.
	Verification *bool `json:"verification,omitempty" tf:"verification,omitempty"`

	// The version ID.
	VersionID *string `json:"versionId,omitempty" tf:"version_id,omitempty"`
}

type DatasetVersionParameters struct {

	// Specifies the ID of dataset.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=Dataset
	// +kubebuilder:validation:Optional
	DatasetID *string `json:"datasetId,omitempty" tf:"dataset_id,omitempty"`

	// Reference to a Dataset to populate datasetId.
	// +kubebuilder:validation:Optional
	DatasetIDRef *v1.Reference `json:"datasetIdRef,omitempty" tf:"-"`

	// Selector for a Dataset to populate datasetId.
	// +kubebuilder:validation:Optional
	DatasetIDSelector *v1.Selector `json:"datasetIdSelector,omitempty" tf:"-"`

	// Specifies the description of dataset version. It contains a maximum of
	// 256 characters and cannot contain special characters !<>=&"'. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether to enable ModelArts to write the hard example
	// attributes (difficult, hard-coefficient, and hard-reasons) into the XML and manifest labeling files. ModelArts will
	// use these attributes to optimize hard example filtering. Default value is false.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	HardExample *bool `json:"hardExample,omitempty" tf:"hard_example,omitempty"`

	// Specifies the name of the dataset version. The name consists of 1 to 32
	// characters. Only letters, Chinese characters, digits underscores (_) and hyphens (-) are allowed.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the ratio of splitting which randomly divides a labeled sample
	// into a training set and a validation set. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SplitRatio *string `json:"splitRatio,omitempty" tf:"split_ratio,omitempty"`
}

// DatasetVersionSpec defines the desired state of DatasetVersion
type DatasetVersionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatasetVersionParameters `json:"forProvider"`
}

// DatasetVersionStatus defines the observed state of DatasetVersion.
type DatasetVersionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatasetVersionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatasetVersion is the Schema for the DatasetVersions API. ""page_title: "flexibleengine_modelarts_dataset_version"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type DatasetVersion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatasetVersionSpec   `json:"spec"`
	Status            DatasetVersionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatasetVersionList contains a list of DatasetVersions
type DatasetVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatasetVersion `json:"items"`
}

// Repository type metadata.
var (
	DatasetVersion_Kind             = "DatasetVersion"
	DatasetVersion_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DatasetVersion_Kind}.String()
	DatasetVersion_KindAPIVersion   = DatasetVersion_Kind + "." + CRDGroupVersion.String()
	DatasetVersion_GroupVersionKind = CRDGroupVersion.WithKind(DatasetVersion_Kind)
)

func init() {
	SchemeBuilder.Register(&DatasetVersion{}, &DatasetVersionList{})
}
