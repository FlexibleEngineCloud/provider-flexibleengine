/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	v1beta1 "github.com/FrangipaneTeam/provider-flexibleengine/apis/eip/v1beta1"
	v1beta11 "github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1"
	common "github.com/FrangipaneTeam/provider-flexibleengine/config/common"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Listener.
func (mg *Listener) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CACertificate),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CACertificateRef,
		Selector:     mg.Spec.ForProvider.CACertificateSelector,
		To: reference.To{
			List:    &CertificateList{},
			Managed: &Certificate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CACertificate")
	}
	mg.Spec.ForProvider.CACertificate = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CACertificateRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DefaultPoolIDRef,
		Selector:     mg.Spec.ForProvider.DefaultPoolIDSelector,
		To: reference.To{
			List:    &PoolList{},
			Managed: &Pool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DefaultPoolID")
	}
	mg.Spec.ForProvider.DefaultPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DefaultPoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPGroup),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.IPGroupRef,
		Selector:     mg.Spec.ForProvider.IPGroupSelector,
		To: reference.To{
			List:    &IPGroupList{},
			Managed: &IPGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPGroup")
	}
	mg.Spec.ForProvider.IPGroup = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPGroupRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadbalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LoadbalancerIDRef,
		Selector:     mg.Spec.ForProvider.LoadbalancerIDSelector,
		To: reference.To{
			List:    &LoadBalancerList{},
			Managed: &LoadBalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LoadbalancerID")
	}
	mg.Spec.ForProvider.LoadbalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LoadbalancerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerCertificate),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServerCertificateRef,
		Selector:     mg.Spec.ForProvider.ServerCertificateSelector,
		To: reference.To{
			List:    &CertificateList{},
			Managed: &Certificate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerCertificate")
	}
	mg.Spec.ForProvider.ServerCertificate = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerCertificateRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SniCertificate),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SniCertificateRefs,
		Selector:      mg.Spec.ForProvider.SniCertificateSelector,
		To: reference.To{
			List:    &CertificateList{},
			Managed: &Certificate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SniCertificate")
	}
	mg.Spec.ForProvider.SniCertificate = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SniCertificateRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this LoadBalancer.
func (mg *LoadBalancer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPv4EIPID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.IPv4EIPIDRef,
		Selector:     mg.Spec.ForProvider.IPv4EIPIDSelector,
		To: reference.To{
			List:    &v1beta1.EIPList{},
			Managed: &v1beta1.EIP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPv4EIPID")
	}
	mg.Spec.ForProvider.IPv4EIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPv4EIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPv4SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.IPv4SubnetIDRef,
		Selector:     mg.Spec.ForProvider.IPv4SubnetIDSelector,
		To: reference.To{
			List:    &v1beta11.VPCSubnetList{},
			Managed: &v1beta11.VPCSubnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPv4SubnetID")
	}
	mg.Spec.ForProvider.IPv4SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPv4SubnetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPv6NetworkID),
		Extract:      common.IDExtractor(),
		Reference:    mg.Spec.ForProvider.IPv6NetworkIDRef,
		Selector:     mg.Spec.ForProvider.IPv6NetworkIDSelector,
		To: reference.To{
			List:    &v1beta11.VPCSubnetList{},
			Managed: &v1beta11.VPCSubnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPv6NetworkID")
	}
	mg.Spec.ForProvider.IPv6NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPv6NetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1beta11.VPCList{},
			Managed: &v1beta11.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Member.
func (mg *Member) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PoolIDRef,
		Selector:     mg.Spec.ForProvider.PoolIDSelector,
		To: reference.To{
			List:    &PoolList{},
			Managed: &Pool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PoolID")
	}
	mg.Spec.ForProvider.PoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1beta11.VPCSubnetList{},
			Managed: &v1beta11.VPCSubnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Monitor.
func (mg *Monitor) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PoolIDRef,
		Selector:     mg.Spec.ForProvider.PoolIDSelector,
		To: reference.To{
			List:    &PoolList{},
			Managed: &Pool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PoolID")
	}
	mg.Spec.ForProvider.PoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Pool.
func (mg *Pool) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ListenerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ListenerIDRef,
		Selector:     mg.Spec.ForProvider.ListenerIDSelector,
		To: reference.To{
			List:    &ListenerList{},
			Managed: &Listener{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ListenerID")
	}
	mg.Spec.ForProvider.ListenerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ListenerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadbalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LoadbalancerIDRef,
		Selector:     mg.Spec.ForProvider.LoadbalancerIDSelector,
		To: reference.To{
			List:    &LoadBalancerList{},
			Managed: &LoadBalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LoadbalancerID")
	}
	mg.Spec.ForProvider.LoadbalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LoadbalancerIDRef = rsp.ResolvedReference

	return nil
}
