/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ListenerObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ListenerParameters struct {

	// +kubebuilder:validation:Optional
	AccessPolicy *string `json:"accessPolicy,omitempty" tf:"access_policy,omitempty"`

	// +kubebuilder:validation:Optional
	AdvancedForwardingEnabled *bool `json:"advancedForwardingEnabled,omitempty" tf:"advanced_forwarding_enabled,omitempty"`

	// +crossplane:generate:reference:type=Certificate
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// Reference to a Certificate to populate caCertificate.
	// +kubebuilder:validation:Optional
	CACertificateRef *v1.Reference `json:"caCertificateRef,omitempty" tf:"-"`

	// Selector for a Certificate to populate caCertificate.
	// +kubebuilder:validation:Optional
	CACertificateSelector *v1.Selector `json:"caCertificateSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=Pool
	// +kubebuilder:validation:Optional
	DefaultPoolID *string `json:"defaultPoolId,omitempty" tf:"default_pool_id,omitempty"`

	// Reference to a Pool to populate defaultPoolId.
	// +kubebuilder:validation:Optional
	DefaultPoolIDRef *v1.Reference `json:"defaultPoolIdRef,omitempty" tf:"-"`

	// Selector for a Pool to populate defaultPoolId.
	// +kubebuilder:validation:Optional
	DefaultPoolIDSelector *v1.Selector `json:"defaultPoolIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ForwardEIP *bool `json:"forwardEip,omitempty" tf:"forward_eip,omitempty"`

	// +kubebuilder:validation:Optional
	Http2Enable *bool `json:"http2Enable,omitempty" tf:"http2_enable,omitempty"`

	// +crossplane:generate:reference:type=IPGroup
	// +kubebuilder:validation:Optional
	IPGroup *string `json:"ipGroup,omitempty" tf:"ip_group,omitempty"`

	// Reference to a IPGroup to populate ipGroup.
	// +kubebuilder:validation:Optional
	IPGroupRef *v1.Reference `json:"ipGroupRef,omitempty" tf:"-"`

	// Selector for a IPGroup to populate ipGroup.
	// +kubebuilder:validation:Optional
	IPGroupSelector *v1.Selector `json:"ipGroupSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	IdleTimeout *float64 `json:"idleTimeout,omitempty" tf:"idle_timeout,omitempty"`

	// +crossplane:generate:reference:type=LoadBalancer
	// +kubebuilder:validation:Optional
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// Reference to a LoadBalancer to populate loadbalancerId.
	// +kubebuilder:validation:Optional
	LoadbalancerIDRef *v1.Reference `json:"loadbalancerIdRef,omitempty" tf:"-"`

	// Selector for a LoadBalancer to populate loadbalancerId.
	// +kubebuilder:validation:Optional
	LoadbalancerIDSelector *v1.Selector `json:"loadbalancerIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Required
	ProtocolPort *float64 `json:"protocolPort" tf:"protocol_port,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	RequestTimeout *float64 `json:"requestTimeout,omitempty" tf:"request_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	ResponseTimeout *float64 `json:"responseTimeout,omitempty" tf:"response_timeout,omitempty"`

	// +crossplane:generate:reference:type=Certificate
	// +kubebuilder:validation:Optional
	ServerCertificate *string `json:"serverCertificate,omitempty" tf:"server_certificate,omitempty"`

	// Reference to a Certificate to populate serverCertificate.
	// +kubebuilder:validation:Optional
	ServerCertificateRef *v1.Reference `json:"serverCertificateRef,omitempty" tf:"-"`

	// Selector for a Certificate to populate serverCertificate.
	// +kubebuilder:validation:Optional
	ServerCertificateSelector *v1.Selector `json:"serverCertificateSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=Certificate
	// +kubebuilder:validation:Optional
	SniCertificate []*string `json:"sniCertificate,omitempty" tf:"sni_certificate,omitempty"`

	// References to Certificate to populate sniCertificate.
	// +kubebuilder:validation:Optional
	SniCertificateRefs []v1.Reference `json:"sniCertificateRefs,omitempty" tf:"-"`

	// Selector for a list of Certificate to populate sniCertificate.
	// +kubebuilder:validation:Optional
	SniCertificateSelector *v1.Selector `json:"sniCertificateSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TLSCiphersPolicy *string `json:"tlsCiphersPolicy,omitempty" tf:"tls_ciphers_policy,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ListenerSpec defines the desired state of Listener
type ListenerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ListenerParameters `json:"forProvider"`
}

// ListenerStatus defines the observed state of Listener.
type ListenerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ListenerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Listener is the Schema for the Listeners API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Listener struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ListenerSpec   `json:"spec"`
	Status            ListenerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ListenerList contains a list of Listeners
type ListenerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Listener `json:"items"`
}

// Repository type metadata.
var (
	Listener_Kind             = "Listener"
	Listener_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Listener_Kind}.String()
	Listener_KindAPIVersion   = Listener_Kind + "." + CRDGroupVersion.String()
	Listener_GroupVersionKind = CRDGroupVersion.WithKind(Listener_Kind)
)

func init() {
	SchemeBuilder.Register(&Listener{}, &ListenerList{})
}
