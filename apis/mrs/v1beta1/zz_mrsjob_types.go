/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MrsJobObservation struct {

	// The completion time of the MRS job.
	FinishTime *string `json:"finishTime,omitempty" tf:"finish_time,omitempty"`

	// ID of the MRS job in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The creation time of the MRS job.
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// Status of the MRS job.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The submission time of the MRS job.
	SubmitTime *string `json:"submitTime,omitempty" tf:"submit_time,omitempty"`
}

type MrsJobParameters struct {

	// Specifies an ID of the MRS cluster to which the job belongs to.
	// Changing this will create a new MRS job resource.
	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// Specifies the name of the MRS job. The name can contain 1 to 64
	// characters, which may consist of letters, digits, underscores (_) and hyphens (-).
	// Changing this will create a new MRS job resource.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the parameters for the MRS job. Add an at sign (@) before
	// each parameter can prevent the parameters being saved in plaintext format. Each parameters are separated with spaces.
	// This parameter can be set when type is Flink, MRS or SparkSubmit. Changing this will create a new
	// MRS job resource.
	// +kubebuilder:validation:Optional
	Parameters *string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Specifies the the key/value pairs of the program parameters, such as
	// thread, memory, and vCPUs, are used to optimize resource usage and improve job execution performance. This parameter
	// can be set when type is Flink, SparkSubmit, SparkSql, SparkScript, HiveSql or
	// HiveScript. Changing this will create a new MRS job resource.
	// +kubebuilder:validation:Optional
	ProgramParameters map[string]*string `json:"programParameters,omitempty" tf:"program_parameters,omitempty"`

	// Specifies the .jar package path or .py file path for program execution.
	// The parameter must meet the following requirements:
	// +kubebuilder:validation:Optional
	ProgramPath *string `json:"programPath,omitempty" tf:"program_path,omitempty"`

	// Specifies the region in which to create the MRS job resource.
	// If omitted, the provider-level region will be used. Changing this will create a new MRS job resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the SQL command or file path. Only required if type is HiveSql
	// or SparkSql. Changing this will create a new MRS job resource.
	// +kubebuilder:validation:Optional
	SQL *string `json:"sql,omitempty" tf:"sql,omitempty"`

	// Specifies the key/value pairs used to modify service configuration.
	// Parameter configurations of services are available on the Service Configuration tab page of MRS Manager.
	// Changing this will create a new MRS job resource.
	// +kubebuilder:validation:Optional
	ServiceParameters map[string]*string `json:"serviceParameters,omitempty" tf:"service_parameters,omitempty"`

	// Specifies the job type. The valid values are MapReduce,
	// Flink, HiveSql, HiveScript, SparkSubmit, SparkSql and SparkScript.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// MrsJobSpec defines the desired state of MrsJob
type MrsJobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MrsJobParameters `json:"forProvider"`
}

// MrsJobStatus defines the observed state of MrsJob.
type MrsJobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MrsJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MrsJob is the Schema for the MrsJobs API. ""page_title: "flexibleengine_mrs_job_v2"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type MrsJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MrsJobSpec   `json:"spec"`
	Status            MrsJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MrsJobList contains a list of MrsJobs
type MrsJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MrsJob `json:"items"`
}

// Repository type metadata.
var (
	MrsJob_Kind             = "MrsJob"
	MrsJob_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MrsJob_Kind}.String()
	MrsJob_KindAPIVersion   = MrsJob_Kind + "." + CRDGroupVersion.String()
	MrsJob_GroupVersionKind = CRDGroupVersion.WithKind(MrsJob_Kind)
)

func init() {
	SchemeBuilder.Register(&MrsJob{}, &MrsJobList{})
}
