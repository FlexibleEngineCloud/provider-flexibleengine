/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AntiDDoSObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AntiDDoSParameters struct {

	// The application type ID.
	// +kubebuilder:validation:Required
	AppTypeID *float64 `json:"appTypeId" tf:"app_type_id,omitempty"`

	// The position ID of access limit during cleaning. The value ranges from 1 to 8.
	// +kubebuilder:validation:Required
	CleaningAccessPosID *float64 `json:"cleaningAccessPosId" tf:"cleaning_access_pos_id,omitempty"`

	// Specifies whether to enable L7 defense.
	// +kubebuilder:validation:Required
	EnableL7 *bool `json:"enableL7" tf:"enable_l7,omitempty"`

	// The ID corresponding to the Elastic IP Address (EIP).
	// +crossplane:generate:reference:type=github.com/FlexibleEngineCloud/provider-flexibleengine/apis/eip/v1beta1.EIP
	// +kubebuilder:validation:Optional
	FloatingIPID *string `json:"floatingIpId,omitempty" tf:"floating_ip_id,omitempty"`

	// Reference to a EIP in eip to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDRef *v1.Reference `json:"floatingIpIdRef,omitempty" tf:"-"`

	// Selector for a EIP in eip to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDSelector *v1.Selector `json:"floatingIpIdSelector,omitempty" tf:"-"`

	// The position ID of number of HTTP requests. The value ranges from 1 to 15.
	// +kubebuilder:validation:Required
	HTTPRequestPosID *float64 `json:"httpRequestPosId" tf:"http_request_pos_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The position ID of traffic. The value ranges from 1 to 9.
	// +kubebuilder:validation:Required
	TrafficPosID *float64 `json:"trafficPosId" tf:"traffic_pos_id,omitempty"`
}

// AntiDDoSSpec defines the desired state of AntiDDoS
type AntiDDoSSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AntiDDoSParameters `json:"forProvider"`
}

// AntiDDoSStatus defines the observed state of AntiDDoS.
type AntiDDoSStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AntiDDoSObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AntiDDoS is the Schema for the AntiDDoSs API. ""page_title: "flexibleengine_antiddos_v1"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type AntiDDoS struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AntiDDoSSpec   `json:"spec"`
	Status            AntiDDoSStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AntiDDoSList contains a list of AntiDDoSs
type AntiDDoSList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AntiDDoS `json:"items"`
}

// Repository type metadata.
var (
	AntiDDoS_Kind             = "AntiDDoS"
	AntiDDoS_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AntiDDoS_Kind}.String()
	AntiDDoS_KindAPIVersion   = AntiDDoS_Kind + "." + CRDGroupVersion.String()
	AntiDDoS_GroupVersionKind = CRDGroupVersion.WithKind(AntiDDoS_Kind)
)

func init() {
	SchemeBuilder.Register(&AntiDDoS{}, &AntiDDoSList{})
}
