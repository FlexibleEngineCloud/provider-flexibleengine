/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ACLRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ACLRuleParameters struct {

	// Specifies the action in the network ACL rule. Currently, the value can be allow or deny.
	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// Specifies the description for the network ACL rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the destination IP address to which the traffic is allowed.
	// The default value is 0.0.0.0/0. For example: xxx.xxx.xxx.xxx (IP address), xxx.xxx.xxx.0/24 (CIDR block).
	// +kubebuilder:validation:Optional
	DestinationIPAddress *string `json:"destinationIpAddress,omitempty" tf:"destination_ip_address,omitempty"`

	// Specifies the destination port number or port number range. The value ranges from 1 to 65535.
	// For a port number range, enter two port numbers connected by a hyphen (-). For example, 1-100.
	// +kubebuilder:validation:Optional
	DestinationPort *string `json:"destinationPort,omitempty" tf:"destination_port,omitempty"`

	// Enabled status for the network ACL rule. Defaults to true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Specifies the IP version, either 4 (default) or 6. This parameter is
	// available after the IPv6 function is enabled.
	// +kubebuilder:validation:Optional
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Specifies a unique name for the network ACL rule.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the protocol supported by the network ACL rule.
	// Valid values are: tcp, udp, icmp and any.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// Specifies the source IP address that the traffic is allowed from.
	// The default value is 0.0.0.0/0. For example: xxx.xxx.xxx.xxx (IP address), xxx.xxx.xxx.0/24 (CIDR block).
	// +kubebuilder:validation:Optional
	SourceIPAddress *string `json:"sourceIpAddress,omitempty" tf:"source_ip_address,omitempty"`

	// Specifies the source port number or port number range. The value ranges from 1 to 65535.
	// For a port number range, enter two port numbers connected by a hyphen (-). For example, 1-100.
	// +kubebuilder:validation:Optional
	SourcePort *string `json:"sourcePort,omitempty" tf:"source_port,omitempty"`
}

// ACLRuleSpec defines the desired state of ACLRule
type ACLRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ACLRuleParameters `json:"forProvider"`
}

// ACLRuleStatus defines the observed state of ACLRule.
type ACLRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ACLRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ACLRule is the Schema for the ACLRules API. ""page_title: "flexibleengine_network_acl_rule"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type ACLRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ACLRuleSpec   `json:"spec"`
	Status            ACLRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ACLRuleList contains a list of ACLRules
type ACLRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ACLRule `json:"items"`
}

// Repository type metadata.
var (
	ACLRule_Kind             = "ACLRule"
	ACLRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ACLRule_Kind}.String()
	ACLRule_KindAPIVersion   = ACLRule_Kind + "." + CRDGroupVersion.String()
	ACLRule_GroupVersionKind = CRDGroupVersion.WithKind(ACLRule_Kind)
)

func init() {
	SchemeBuilder.Register(&ACLRule{}, &ACLRuleList{})
}
