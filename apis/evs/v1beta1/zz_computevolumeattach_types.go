/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ComputeVolumeAttachObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ComputeVolumeAttachParameters struct {

	// The device of the volume attachment (ex: /dev/vdc).
	// Being able to specify a device is dependent upon the hypervisor in use. Please use with caution.
	// +kubebuilder:validation:Optional
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// The ID of the Instance to attach the Volume to.
	// +crossplane:generate:reference:type=github.com/FlexibleEngineCloud/provider-flexibleengine/apis/ecs/v1beta1.Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in ecs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// The region in which to obtain the V2 Compute client.
	// A Compute client is needed to create a volume attachment. If omitted, the
	// region argument of the provider is used. Changing this creates a
	// new volume attachment.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The ID of the Volume to attach to an Instance.
	// +crossplane:generate:reference:type=github.com/FlexibleEngineCloud/provider-flexibleengine/apis/evs/v1beta1.BlockStorageVolume
	// +kubebuilder:validation:Optional
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`

	// Reference to a BlockStorageVolume in evs to populate volumeId.
	// +kubebuilder:validation:Optional
	VolumeIDRef *v1.Reference `json:"volumeIdRef,omitempty" tf:"-"`

	// Selector for a BlockStorageVolume in evs to populate volumeId.
	// +kubebuilder:validation:Optional
	VolumeIDSelector *v1.Selector `json:"volumeIdSelector,omitempty" tf:"-"`
}

// ComputeVolumeAttachSpec defines the desired state of ComputeVolumeAttach
type ComputeVolumeAttachSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ComputeVolumeAttachParameters `json:"forProvider"`
}

// ComputeVolumeAttachStatus defines the observed state of ComputeVolumeAttach.
type ComputeVolumeAttachStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ComputeVolumeAttachObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ComputeVolumeAttach is the Schema for the ComputeVolumeAttachs API. ""page_title: "flexibleengine_compute_volume_attach_v2"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type ComputeVolumeAttach struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ComputeVolumeAttachSpec   `json:"spec"`
	Status            ComputeVolumeAttachStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ComputeVolumeAttachList contains a list of ComputeVolumeAttachs
type ComputeVolumeAttachList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ComputeVolumeAttach `json:"items"`
}

// Repository type metadata.
var (
	ComputeVolumeAttach_Kind             = "ComputeVolumeAttach"
	ComputeVolumeAttach_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ComputeVolumeAttach_Kind}.String()
	ComputeVolumeAttach_KindAPIVersion   = ComputeVolumeAttach_Kind + "." + CRDGroupVersion.String()
	ComputeVolumeAttach_GroupVersionKind = CRDGroupVersion.WithKind(ComputeVolumeAttach_Kind)
)

func init() {
	SchemeBuilder.Register(&ComputeVolumeAttach{}, &ComputeVolumeAttachList{})
}
