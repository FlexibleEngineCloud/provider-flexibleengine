/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConversionRulesLocalObservation struct {
}

type ConversionRulesLocalParameters struct {

	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type ConversionRulesRemoteObservation struct {
}

type ConversionRulesRemoteParameters struct {

	// +kubebuilder:validation:Required
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// +kubebuilder:validation:Optional
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Optional
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type ProviderConversionConversionRulesObservation struct {
}

type ProviderConversionConversionRulesParameters struct {

	// +kubebuilder:validation:Required
	Local []ConversionRulesLocalParameters `json:"local" tf:"local,omitempty"`

	// +kubebuilder:validation:Required
	Remote []ConversionRulesRemoteParameters `json:"remote" tf:"remote,omitempty"`
}

type ProviderConversionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProviderConversionParameters struct {

	// +kubebuilder:validation:Required
	ConversionRules []ProviderConversionConversionRulesParameters `json:"conversionRules" tf:"conversion_rules,omitempty"`

	// +kubebuilder:validation:Required
	ProviderID *string `json:"providerId" tf:"provider_id,omitempty"`
}

// ProviderConversionSpec defines the desired state of ProviderConversion
type ProviderConversionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProviderConversionParameters `json:"forProvider"`
}

// ProviderConversionStatus defines the observed state of ProviderConversion.
type ProviderConversionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProviderConversionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderConversion is the Schema for the ProviderConversions API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type ProviderConversion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProviderConversionSpec   `json:"spec"`
	Status            ProviderConversionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderConversionList contains a list of ProviderConversions
type ProviderConversionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProviderConversion `json:"items"`
}

// Repository type metadata.
var (
	ProviderConversion_Kind             = "ProviderConversion"
	ProviderConversion_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProviderConversion_Kind}.String()
	ProviderConversion_KindAPIVersion   = ProviderConversion_Kind + "." + CRDGroupVersion.String()
	ProviderConversion_GroupVersionKind = CRDGroupVersion.WithKind(ProviderConversion_Kind)
)

func init() {
	SchemeBuilder.Register(&ProviderConversion{}, &ProviderConversionList{})
}
