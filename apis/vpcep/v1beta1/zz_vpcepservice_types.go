/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PortMappingObservation struct {
}

type PortMappingParameters struct {

	// Specifies the protocol used in port mappings.
	// The value can be TCP or UDP. The default value is TCP.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the port for accessing the VPC endpoint service.
	// This port is provided by the backend service to provide services. The value ranges from 1 to 65535.
	// +kubebuilder:validation:Optional
	ServicePort *float64 `json:"servicePort,omitempty" tf:"service_port,omitempty"`

	// Specifies the port for accessing the VPC endpoint.
	// This port is provided by the VPC endpoint, allowing you to access the VPC endpoint service.
	// The value ranges from 1 to 65535.
	// +kubebuilder:validation:Optional
	TerminalPort *float64 `json:"terminalPort,omitempty" tf:"terminal_port,omitempty"`
}

type VPCEPServiceConnectionsObservation struct {

	// The user's domain ID.
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// The unique ID of the VPC endpoint.
	EndpointID *string `json:"endpointId,omitempty" tf:"endpoint_id,omitempty"`

	// The packet ID of the VPC endpoint.
	PacketID *float64 `json:"packetId,omitempty" tf:"packet_id,omitempty"`

	// The status of the VPC endpoint service. The value can be available or failed.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VPCEPServiceConnectionsParameters struct {
}

type VPCEPServiceObservation struct {

	// An array of VPC endpoints connect to the VPC endpoint service. Structure is documented below.
	Connections []VPCEPServiceConnectionsObservation `json:"connections,omitempty" tf:"connections,omitempty"`

	// The unique ID of the VPC endpoint service.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The full name of the VPC endpoint service in the format: region.name.id.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// The status of the VPC endpoint service. The value can be available or failed.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VPCEPServiceParameters struct {

	// Specifies whether connection approval is required. The default value is false.
	// +kubebuilder:validation:Optional
	Approval *bool `json:"approval,omitempty" tf:"approval,omitempty"`

	// Specifies the name of the VPC endpoint service. The value contains a maximum of
	// 16 characters, including letters, digits, underscores (_), and hyphens (-).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the list of accounts to access the VPC endpoint service.
	// The record is in the iam:domain::domain_id format, while * allows all users to access the VPC endpoint service.
	// +kubebuilder:validation:Optional
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// Specifies the ID for identifying the backend resource of the VPC endpoint service.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/ecs/v1beta1.Instance
	// +crossplane:generate:reference:extractor=github.com/FrangipaneTeam/provider-flexibleengine/config/common.NetworkPortIDExtractor()
	// +kubebuilder:validation:Optional
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// Reference to a Instance in ecs to populate portId.
	// +kubebuilder:validation:Optional
	PortIDRef *v1.Reference `json:"portIdRef,omitempty" tf:"-"`

	// Selector for a Instance in ecs to populate portId.
	// +kubebuilder:validation:Optional
	PortIDSelector *v1.Selector `json:"portIdSelector,omitempty" tf:"-"`

	// Specified the port mappings opened to the VPC endpoint service.
	// Structure is documented below.
	// +kubebuilder:validation:Required
	PortMapping []PortMappingParameters `json:"portMapping" tf:"port_mapping,omitempty"`

	// The region in which to create the VPC endpoint service.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the backend resource type. The value can be VM, VIP or LB.
	// Changing this creates a new VPC endpoint service.
	// +kubebuilder:validation:Required
	ServerType *string `json:"serverType" tf:"server_type,omitempty"`

	// The type of the VPC endpoint service. Only interface can be configured.
	// +kubebuilder:validation:Optional
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// The key/value pairs to associate with the VPC endpoint service.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the ID of the VPC to which the backend resource of
	// the VPC endpoint service belongs. Changing this creates a new VPC endpoint service.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/vpc/v1beta1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// VPCEPServiceSpec defines the desired state of VPCEPService
type VPCEPServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCEPServiceParameters `json:"forProvider"`
}

// VPCEPServiceStatus defines the observed state of VPCEPService.
type VPCEPServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCEPServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPCEPService is the Schema for the VPCEPServices API. ""page_title: "flexibleengine_vpcep_service"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type VPCEPService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPCEPServiceSpec   `json:"spec"`
	Status            VPCEPServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCEPServiceList contains a list of VPCEPServices
type VPCEPServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCEPService `json:"items"`
}

// Repository type metadata.
var (
	VPCEPService_Kind             = "VPCEPService"
	VPCEPService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCEPService_Kind}.String()
	VPCEPService_KindAPIVersion   = VPCEPService_Kind + "." + CRDGroupVersion.String()
	VPCEPService_GroupVersionKind = CRDGroupVersion.WithKind(VPCEPService_Kind)
)

func init() {
	SchemeBuilder.Register(&VPCEPService{}, &VPCEPServiceList{})
}
