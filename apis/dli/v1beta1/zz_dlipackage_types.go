/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DLIPackageObservation struct {

	// Time when a queue is created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Resource ID. The ID is constructed from the group_name and object_name, separated by slash.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The package name.
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`

	// Status of a package group to be uploaded.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The last time when the package configuration update has complated.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type DLIPackageParameters struct {

	// Specifies the group name which the package belongs to.
	// Changing this parameter will delete the current package and upload a new package.
	// +kubebuilder:validation:Required
	GroupName *string `json:"groupName" tf:"group_name,omitempty"`

	// Specifies whether to upload resource packages in asynchronous mode.
	// The default value is false. Changing this parameter will delete the current package and upload a new package.
	// +kubebuilder:validation:Optional
	IsAsync *bool `json:"isAsync,omitempty" tf:"is_async,omitempty"`

	// Specifies the OBS storage path where the package is located.
	// For example, https://{bucket_name}.oss.{region}.prod-cloud-ocb.orange-business.com/dli/packages/object_file.py.
	// Changing this parameter will delete the current package and upload a new package.
	// +kubebuilder:validation:Required
	ObjectPath *string `json:"objectPath" tf:"object_path,omitempty"`

	// Specifies the name of the package owner. The owner must be IAM user.
	// +kubebuilder:validation:Optional
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// Specifies the region in which to upload packages.
	// If omitted, the provider-level region will be used.
	// Changing this parameter will delete the current package and upload a new package.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the package type.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// DLIPackageSpec defines the desired state of DLIPackage
type DLIPackageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DLIPackageParameters `json:"forProvider"`
}

// DLIPackageStatus defines the observed state of DLIPackage.
type DLIPackageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DLIPackageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DLIPackage is the Schema for the DLIPackages API. ""page_title: "flexibleengine_dli_package"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type DLIPackage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DLIPackageSpec   `json:"spec"`
	Status            DLIPackageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DLIPackageList contains a list of DLIPackages
type DLIPackageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DLIPackage `json:"items"`
}

// Repository type metadata.
var (
	DLIPackage_Kind             = "DLIPackage"
	DLIPackage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DLIPackage_Kind}.String()
	DLIPackage_KindAPIVersion   = DLIPackage_Kind + "." + CRDGroupVersion.String()
	DLIPackage_GroupVersionKind = CRDGroupVersion.WithKind(DLIPackage_Kind)
)

func init() {
	SchemeBuilder.Register(&DLIPackage{}, &DLIPackageList{})
}
