/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ColumnsObservation struct {
}

type ColumnsParameters struct {

	// Specifies description of the table.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether the column is a partition column. The value
	// true indicates a partition column, and the value false indicates a non-partition column. The default value
	// is false. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	IsPartition *bool `json:"isPartition,omitempty" tf:"is_partition,omitempty"`

	// Specifies the table name. The name can contain only digits, letters,
	// and underscores, but cannot contain only digits or start with an underscore. Length range: 1 to 128 characters.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies data type of column. Changing this parameter will create a new
	// resource.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type TableObservation struct {

	// A resource ID in format of database_name/table_name. It is composed of the name of database which table
	// belongs and the name of table, separated by a slash.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TableParameters struct {

	// Specifies storage path of data which will be import to the OBS table.
	// Changing this parameter will create a new resource.
	// -> If you need to import data stored in OBS to the OBS table, set this parameter to the path of a folder. If the table
	// creation path is a file, data fails to be imported. which must be a path on OBS and must begin with obs.
	// +kubebuilder:validation:Optional
	BucketLocation *string `json:"bucketLocation,omitempty" tf:"bucket_location,omitempty"`

	// Specifies Columns of the new table. Structure is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Columns []ColumnsParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// Specifies type of the data to be added to the OBS table.
	// The options: parquet, orc, csv, json, carbon, and avro. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DataFormat *string `json:"dataFormat,omitempty" tf:"data_format,omitempty"`

	// Specifies data storage location. Changing this parameter will create
	// a newresource. The options are as follows:
	// +kubebuilder:validation:Required
	DataLocation *string `json:"dataLocation" tf:"data_location,omitempty"`

	// Specifies the database name which the table belongs to.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=Database
	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// Reference to a Database to populate databaseName.
	// +kubebuilder:validation:Optional
	DatabaseNameRef *v1.Reference `json:"databaseNameRef,omitempty" tf:"-"`

	// Selector for a Database to populate databaseName.
	// +kubebuilder:validation:Optional
	DatabaseNameSelector *v1.Selector `json:"databaseNameSelector,omitempty" tf:"-"`

	// Specifies date type. yyyy-MM-dd is used by default. Only
	// data in CSV and JSON files has this attribute. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DateFormat *string `json:"dateFormat,omitempty" tf:"date_format,omitempty"`

	// Specifies data delimiter. Only data in CSV files has this
	// attribute. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Delimiter *string `json:"delimiter,omitempty" tf:"delimiter,omitempty"`

	// Specifies description of the table.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies escape character. Backslashes (\\) are used by
	// default. Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	EscapeChar *string `json:"escapeChar,omitempty" tf:"escape_char,omitempty"`

	// Specifies the table name. The name can contain only digits, letters,
	// and underscores, but cannot contain only digits or start with an underscore. Length range: 1 to 128 characters.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies reference character. Double quotation marks (\)
	// are used by default. Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	QuoteChar *string `json:"quoteChar,omitempty" tf:"quote_char,omitempty"`

	// Specifies the region in which to create the dli table resource. If omitted,
	// the provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies timestamp type. yyyy-MM-dd HH:mm:ss is used by default.
	// Only data in CSV and JSON files has this attribute. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	TimestampFormat *string `json:"timestampFormat,omitempty" tf:"timestamp_format,omitempty"`

	// Specifies whether the table header is included in the data file.
	// Only data in CSV files has this attribute. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	WithColumnHeader *bool `json:"withColumnHeader,omitempty" tf:"with_column_header,omitempty"`
}

// TableSpec defines the desired state of Table
type TableSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TableParameters `json:"forProvider"`
}

// TableStatus defines the observed state of Table.
type TableStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TableObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Table is the Schema for the Tables API. ""page_title: "flexibleengine_dli_table"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Table struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TableSpec   `json:"spec"`
	Status            TableStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TableList contains a list of Tables
type TableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Table `json:"items"`
}

// Repository type metadata.
var (
	Table_Kind             = "Table"
	Table_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Table_Kind}.String()
	Table_KindAPIVersion   = Table_Kind + "." + CRDGroupVersion.String()
	Table_GroupVersionKind = CRDGroupVersion.WithKind(Table_Kind)
)

func init() {
	SchemeBuilder.Register(&Table{}, &TableList{})
}
