/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReplicationPairObservation struct {

	// ID of the replication pair.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ReplicationPairParameters struct {

	// Specifies whether to delete the target disk.
	// The default value is false.
	// +kubebuilder:validation:Optional
	DeleteTargetVolume *bool `json:"deleteTargetVolume,omitempty" tf:"delete_target_volume,omitempty"`

	// The description of a replication pair. Changing this creates a new pair.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the fault level of a replication pair.
	// +kubebuilder:validation:Optional
	FaultLevel *string `json:"faultLevel,omitempty" tf:"fault_level,omitempty"`

	// Specifies the ID of a protection group. Changing this creates a new pair.
	// +crossplane:generate:reference:type=ProtectionGroup
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Reference to a ProtectionGroup to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDRef *v1.Reference `json:"groupIdRef,omitempty" tf:"-"`

	// Selector for a ProtectionGroup to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDSelector *v1.Selector `json:"groupIdSelector,omitempty" tf:"-"`

	// The name of a replication pair. The name can contain a maximum of 64 bytes.
	// The value can contain only letters (a to z and A to Z), digits (0 to 9), decimal points (.),
	// underscores (_), and hyphens (-).
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the replication mode of a replication pair. The default value is hypermetro.
	// +kubebuilder:validation:Optional
	ReplicationModel *string `json:"replicationModel,omitempty" tf:"replication_model,omitempty"`

	// Specifies the status of a replication pair.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the ID of the disk in the protection availability zone.
	// +kubebuilder:validation:Optional
	TargetVolumeID *string `json:"targetVolumeId,omitempty" tf:"target_volume_id,omitempty"`

	// Specifies the ID of a source disk. Changing this creates a new pair.
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-flexibleengine/apis/evs/v1beta1.BlockStorageVolume
	// +kubebuilder:validation:Optional
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`

	// Reference to a BlockStorageVolume in evs to populate volumeId.
	// +kubebuilder:validation:Optional
	VolumeIDRef *v1.Reference `json:"volumeIdRef,omitempty" tf:"-"`

	// Selector for a BlockStorageVolume in evs to populate volumeId.
	// +kubebuilder:validation:Optional
	VolumeIDSelector *v1.Selector `json:"volumeIdSelector,omitempty" tf:"-"`
}

// ReplicationPairSpec defines the desired state of ReplicationPair
type ReplicationPairSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReplicationPairParameters `json:"forProvider"`
}

// ReplicationPairStatus defines the observed state of ReplicationPair.
type ReplicationPairStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReplicationPairObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicationPair is the Schema for the ReplicationPairs API. ""page_title: "flexibleengine_sdrs_replication_pair_v1"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type ReplicationPair struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReplicationPairSpec   `json:"spec"`
	Status            ReplicationPairStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicationPairList contains a list of ReplicationPairs
type ReplicationPairList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReplicationPair `json:"items"`
}

// Repository type metadata.
var (
	ReplicationPair_Kind             = "ReplicationPair"
	ReplicationPair_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ReplicationPair_Kind}.String()
	ReplicationPair_KindAPIVersion   = ReplicationPair_Kind + "." + CRDGroupVersion.String()
	ReplicationPair_GroupVersionKind = CRDGroupVersion.WithKind(ReplicationPair_Kind)
)

func init() {
	SchemeBuilder.Register(&ReplicationPair{}, &ReplicationPairList{})
}
