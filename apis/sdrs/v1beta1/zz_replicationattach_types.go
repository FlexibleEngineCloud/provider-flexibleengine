/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReplicationAttachObservation struct {

	// The resource ID in format of <instance_id>:<replication_id>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The status of the SDRS replication attch resource.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ReplicationAttachParameters struct {

	// Specifies the device name, eg. /dev/vdb. Changing this creates a new replication attach.
	// +kubebuilder:validation:Required
	Device *string `json:"device" tf:"device,omitempty"`

	// Specifies the ID of a protected instance. Changing this creates a new replication attach.
	// +crossplane:generate:reference:type=ProtectedInstance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a ProtectedInstance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a ProtectedInstance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Specifies the ID of a replication pair. Changing this creates a new replication attach.
	// +crossplane:generate:reference:type=ReplicationPair
	// +kubebuilder:validation:Optional
	ReplicationID *string `json:"replicationId,omitempty" tf:"replication_id,omitempty"`

	// Reference to a ReplicationPair to populate replicationId.
	// +kubebuilder:validation:Optional
	ReplicationIDRef *v1.Reference `json:"replicationIdRef,omitempty" tf:"-"`

	// Selector for a ReplicationPair to populate replicationId.
	// +kubebuilder:validation:Optional
	ReplicationIDSelector *v1.Selector `json:"replicationIdSelector,omitempty" tf:"-"`
}

// ReplicationAttachSpec defines the desired state of ReplicationAttach
type ReplicationAttachSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReplicationAttachParameters `json:"forProvider"`
}

// ReplicationAttachStatus defines the observed state of ReplicationAttach.
type ReplicationAttachStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReplicationAttachObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicationAttach is the Schema for the ReplicationAttachs API. ""page_title: "flexibleengine_sdrs_replication_attach_v1"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type ReplicationAttach struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReplicationAttachSpec   `json:"spec"`
	Status            ReplicationAttachStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicationAttachList contains a list of ReplicationAttachs
type ReplicationAttachList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReplicationAttach `json:"items"`
}

// Repository type metadata.
var (
	ReplicationAttach_Kind             = "ReplicationAttach"
	ReplicationAttach_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ReplicationAttach_Kind}.String()
	ReplicationAttach_KindAPIVersion   = ReplicationAttach_Kind + "." + CRDGroupVersion.String()
	ReplicationAttach_GroupVersionKind = CRDGroupVersion.WithKind(ReplicationAttach_Kind)
)

func init() {
	SchemeBuilder.Register(&ReplicationAttach{}, &ReplicationAttachList{})
}
