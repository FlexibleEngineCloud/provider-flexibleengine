/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DrillObservation struct {

	// ID of a DR drill.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DrillParameters struct {

	// Specifies the ID used for a DR drill. Changing this creates a new drill.
	// +crossplane:generate:reference:type=github.com/FlexibleEngineCloud/provider-flexibleengine/apis/vpc/v1beta1.VPC
	// +kubebuilder:validation:Optional
	DrillVPCID *string `json:"drillVpcId,omitempty" tf:"drill_vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate drillVpcId.
	// +kubebuilder:validation:Optional
	DrillVPCIDRef *v1.Reference `json:"drillVpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate drillVpcId.
	// +kubebuilder:validation:Optional
	DrillVPCIDSelector *v1.Selector `json:"drillVpcIdSelector,omitempty" tf:"-"`

	// Specifies the ID of a protection group. Changing this creates a new drill.
	// +crossplane:generate:reference:type=ProtectionGroup
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Reference to a ProtectionGroup to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDRef *v1.Reference `json:"groupIdRef,omitempty" tf:"-"`

	// Selector for a ProtectionGroup to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDSelector *v1.Selector `json:"groupIdSelector,omitempty" tf:"-"`

	// The name of a DR drill. The name can contain a maximum of 64 bytes.
	// The value can contain only letters (a to z and A to Z), digits (0 to 9), decimal points (.),
	// underscores (_), and hyphens (-).
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The status of a DR drill.
	// For details, see DR Drill Status.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

// DrillSpec defines the desired state of Drill
type DrillSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DrillParameters `json:"forProvider"`
}

// DrillStatus defines the observed state of Drill.
type DrillStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DrillObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Drill is the Schema for the Drills API. ""page_title: "flexibleengine_sdrs_drill_v1"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Drill struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DrillSpec   `json:"spec"`
	Status            DrillStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DrillList contains a list of Drills
type DrillList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Drill `json:"items"`
}

// Repository type metadata.
var (
	Drill_Kind             = "Drill"
	Drill_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Drill_Kind}.String()
	Drill_KindAPIVersion   = Drill_Kind + "." + CRDGroupVersion.String()
	Drill_GroupVersionKind = CRDGroupVersion.WithKind(Drill_Kind)
)

func init() {
	SchemeBuilder.Register(&Drill{}, &DrillList{})
}
