/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupCycleObservation struct {
}

type BackupCycleParameters struct {

	// Specifies the weekly backup day of backup schedule. It supports seven days a week (MO, TU,
	// WE, TH, FR, SA, SU) and this parameter is separated by a comma (,) without spaces, between date and date during the
	// configuration.
	// +kubebuilder:validation:Optional
	Days *string `json:"days,omitempty" tf:"days,omitempty"`

	// Specifies the backup time. Automated backups will be triggered at the backup
	// time. The current time is in the UTC format (HH:MM). The minutes in the list must be set to 00 and the hours
	// cannot be repeated. In the replication policy, you are advised to set one time point for one day.
	// +kubebuilder:validation:Required
	ExecutionTimes []*string `json:"executionTimes" tf:"execution_times,omitempty"`

	// Specifies the interval (in days) of backup schedule. The value range is 1 to 30. This
	// parameter and days are alternative.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type LongTermRetentionObservation struct {
}

type LongTermRetentionParameters struct {

	// - Specifies the latest backup of each day is saved in the long term.
	// +kubebuilder:validation:Optional
	Daily *float64 `json:"daily,omitempty" tf:"daily,omitempty"`

	// - Specifies the latest backup of each month is saved in the long term.
	// +kubebuilder:validation:Optional
	Monthly *float64 `json:"monthly,omitempty" tf:"monthly,omitempty"`

	// - Specifies the latest backup of each week is saved in the long term.
	// +kubebuilder:validation:Optional
	Weekly *float64 `json:"weekly,omitempty" tf:"weekly,omitempty"`

	// - Specifies the latest backup of each year is saved in the long term.
	// +kubebuilder:validation:Optional
	Yearly *float64 `json:"yearly,omitempty" tf:"yearly,omitempty"`
}

type PolicyObservation struct {

	// A resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicyParameters struct {

	// Specifies the scheduling rule for the CBR policy backup execution.
	// The object structure is documented below.
	// +kubebuilder:validation:Required
	BackupCycle []BackupCycleParameters `json:"backupCycle" tf:"backup_cycle,omitempty"`

	// Specifies the maximum number of retained backups. The value ranges from 2 to
	// 99,999. This parameter and time_period are alternative.
	// +kubebuilder:validation:Optional
	BackupQuantity *float64 `json:"backupQuantity,omitempty" tf:"backup_quantity,omitempty"`

	// Specifies the ID of the replication destination project, which is
	// mandatory for cross-region replication. Required if protection_type is replication.
	// +kubebuilder:validation:Optional
	DestinationProjectID *string `json:"destinationProjectId,omitempty" tf:"destination_project_id,omitempty"`

	// Specifies the name of the replication destination region, which is mandatory
	// for cross-region replication. Required if protection_type is replication.
	// +kubebuilder:validation:Optional
	DestinationRegion *string `json:"destinationRegion,omitempty" tf:"destination_region,omitempty"`

	// Specifies whether to enable the CBR policy. Default to true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Specifies the long-term retention rules, which is an advanced options of
	// the backup_quantity. The object structure is documented below.
	// +kubebuilder:validation:Optional
	LongTermRetention []LongTermRetentionParameters `json:"longTermRetention,omitempty" tf:"long_term_retention,omitempty"`

	// Specifies a unique name of the CBR policy. This parameter can contain a maximum of 64
	// characters, which may consist of chinese charactors, letters, digits, underscores(_) and hyphens (-).
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the region in which to create the CBR policy. If omitted, the
	// provider-level region will be used. Changing this will create a new policy.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the duration (in days) for retained backups. The value ranges from 2 to
	// 99,999.
	// +kubebuilder:validation:Optional
	TimePeriod *float64 `json:"timePeriod,omitempty" tf:"time_period,omitempty"`

	// Specifies the UTC time zone, e.g.: UTC+08:00.
	// Required if long_term_retention is set.
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// Specifies the protection type of the CBR policy.
	// Valid values are backup and replication.
	// Changing this will create a new policy.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// PolicySpec defines the desired state of Policy
type PolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyParameters `json:"forProvider"`
}

// PolicyStatus defines the observed state of Policy.
type PolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Policy is the Schema for the Policys API. ""page_title: "flexibleengine_cbr_policy"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flexibleengine}
type Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicySpec   `json:"spec"`
	Status            PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyList contains a list of Policys
type PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Policy `json:"items"`
}

// Repository type metadata.
var (
	Policy_Kind             = "Policy"
	Policy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Policy_Kind}.String()
	Policy_KindAPIVersion   = Policy_Kind + "." + CRDGroupVersion.String()
	Policy_GroupVersionKind = CRDGroupVersion.WithKind(Policy_Kind)
)

func init() {
	SchemeBuilder.Register(&Policy{}, &PolicyList{})
}
